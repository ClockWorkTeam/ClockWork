#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\include{preface}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Design Pattern
\end_layout

\begin_layout Standard
Presentiamo qui di seguito i design pattern che andremo ad utilizzare per
 la rappresentazione dell'architettura del sistema.
\end_layout

\begin_layout Subsection
Architettura generale
\end_layout

\begin_layout Subsubsection
MVP
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/mvp.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Rappresentazione MVP
\begin_inset CommandInset label
LatexCommand label
name "fig:Rappresentazione-MVP"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Descrizione:
\series default
 tale design pattern permette una completa disgiunzione tra le funzionalità
 che il prodotto deve offrire ed è strutturato in tre livelli
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Model:
\series default
 rappresenta la parte in grado di recuperare le informazioni presenti nel
 sistema
\end_layout

\begin_layout Itemize

\series bold
View:
\series default
 rappresenta l'interfaccia grafica del sistema con la quale gli utenti possono
 interagire
\end_layout

\begin_layout Itemize

\series bold
Presenter:
\series default
 rappresenta la componente che riceve le richieste dalla view e le traduce
 in operazioni che agiranno sui modelli
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Motivazione:
\series default
 questo design pattern permette un buon livello di disaccoppiamento tra
 la vista ed il modello.
 L'architettura risulta facilmente manutenibile poiché le modifiche ad uno
 dei tre componenti non comporta modifiche ai restanti
\end_layout

\begin_layout Subsection
Architettura server
\end_layout

\begin_layout Subsubsection
Multitier
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/multi-tier.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Rappresentazione Three Tier
\begin_inset CommandInset label
LatexCommand label
name "fig:Rappresentazione-Three-Tier"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Il design pattern di tipo Multitier verrà implementato nella forma Three
 Tier:
\end_layout

\begin_layout Itemize

\series bold
Descrizione:
\series default
 tale design pattern permette una disgiunzione fra i vari gruppi di entità
 che cooperano per l'erogazione del servizio.
 Un primo livello si occuperà della comunicazione con il client, un secondo
 livello invece si occuperà di effettuare le operazioni logiche e di comunicare
 con il terzo strato che si occuperà di modificare la base di dati
\end_layout

\begin_layout Itemize

\series bold
Motivazione:
\series default
 il beneficio principale di questo design pattern è la possibilità di aggiornare
/cambiare un livello senza modificare i livelli adiacenti.
 La forte comunicazione rigidamente strutturata tra gli strati, che favorisce
 il disaccoppiamento, rende tale design pattern un ottimo modello per applicazio
ni client-server, poiché ogni livello non esiste come unità logica a se
 stante, ma si adegua allo specifico ambiente di rete in cui esegue
\end_layout

\begin_layout Itemize

\series bold
Contesto applicativo:
\series default
 tale design pattern verrà utilizzato come struttura portante del server
 e sarà suddiviso come segue
\end_layout

\begin_deeper
\begin_layout Itemize
Transfer Layer: offrirà un'interfaccia di comunicazione con il client e
 i livelli sottostanti del server
\end_layout

\begin_layout Itemize
Manager Layer: si occuperà di svolgere le funzionalità di comunicazione
 e di gestire la visualizzazione e la modifica delle informazioni presenti
 nello strato Data
\end_layout

\begin_layout Itemize
Data Layer: sarà un contenitore di informazioni riguardanti gli utenti e
 di messaggi registrati e collegamenti
\end_layout

\end_deeper
\begin_layout Subsubsection
Singleton
\end_layout

\begin_layout Itemize

\series bold
Descrizione:
\series default
 tale design pattern assicura la presenza di unica istanza della classe
 e fornisce un punto d'accesso globale a tale istanza, tramite costruttore
 privato e puntatore alla classe stessa
\end_layout

\begin_layout Itemize

\series bold
Motivazione:
\series default
 utilizzeremo tale design pattern al fine di impedire la proliferazione
 di copie di parti del server, e quindi interferenze
\end_layout

\begin_layout Itemize

\series bold
Contesto applicativo:
\series default
 verrà utilizzato all'avvio del server, per inizializzare corettamente le
 classi del nostro server
\end_layout

\begin_layout Subsection
Architettura client
\end_layout

\begin_layout Subsubsection
MV*
\end_layout

\begin_layout Itemize

\series bold
Descrizione: 
\series default
tale design pattern deriva da MVC e MVP con la differenza che le funzioni
 di controller/presenter sono integrate nella view
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Model: 
\series default
rappresenta le informazioni da cui necessita l'applicazione
\end_layout

\begin_layout Itemize

\series bold
View: 
\series default
contiene i metodi per visualizzare l'interfaccia grafica, composta dalle
 informazioni richieste, e per la creazione ed assegnazione di eventi
\end_layout

\begin_layout Itemize

\series bold
Template: 
\series default
sono frammenti di codice HTML che rappresentano il layout della view
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Motivazione: 
\series default
utilizzeremo questo pattern in quanto è quello utilizzato da Backbone.js
 che è il framework che andremo ad utilizzare per la realizzazione della
 parte client e perché permette lo sviluppo di applicazioni web dinamiche,
 strutturate e modulari
\end_layout

\begin_layout Subsubsection
Observer
\end_layout

\begin_layout Itemize

\series bold
Descrizione:
\series default
 tale design pattern si occupa di gestire i cambiamenti che avvengono in
 un oggetto riflettendone le conseguenze su tutti gli oggetti ad esso legato
\end_layout

\begin_layout Itemize

\series bold
Motivazione:
\series default
 questo design pattern modifica delle componenti nel caso altre componenti
 ad esse legate vengano modificate  
\end_layout

\begin_layout Itemize

\series bold
Contesto applicativo:
\series default
 si rivela utile per quanto riguarda la manutenibilità della lista utenti
 connessi o meno o nel caso nuovi utenti si registrino
\end_layout

\end_body
\end_document
