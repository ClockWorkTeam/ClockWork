#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Specifica Server
\end_layout

\begin_layout Standard
Il server contiene i seguenti package:
\end_layout

\begin_layout Itemize
Data (vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Package-Data"

\end_inset

)
\end_layout

\begin_layout Itemize
Dao (vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Package-Dao"

\end_inset

)
\end_layout

\begin_layout Itemize
Shared (vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Package-Shared"

\end_inset

)
\end_layout

\begin_layout Itemize
Manager (vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Package-Manager"

\end_inset

)
\end_layout

\begin_layout Itemize
Transfer (vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Package-Transfer"

\end_inset

)
\end_layout

\begin_layout Subsection
Package Data 
\begin_inset CommandInset label
LatexCommand label
name "sub:Package-Data-1"

\end_inset


\end_layout

\begin_layout Subsubsection
data.UserDataSQL
\end_layout

\begin_layout Standard
I campi che contiene questa tabella sono i seguenti:
\end_layout

\begin_layout Itemize
id: intero, incrementale, unique
\end_layout

\begin_layout Itemize
username: char (alfanumerico codice ASCII), unique, almeno 6 caratteri
\end_layout

\begin_layout Itemize
password: string (alfanumerico codice ASCII), almeno 6 caratteri, diverso
 dallo username (no parsing)
\end_layout

\begin_layout Itemize
nome: solo lettere alfabetiche
\end_layout

\begin_layout Itemize
cognome: solo lettere alfabetiche
\end_layout

\begin_layout Subsubsection
data.RecordMassageDataSQL
\end_layout

\begin_layout Standard
I campi che contiene questa tabella sono i seguenti:
\end_layout

\begin_layout Itemize
mittente: username
\end_layout

\begin_layout Itemize
destinatario: username
\end_layout

\begin_layout Itemize
creazione: date
\end_layout

\begin_layout Itemize
messaggio: in mediastream (da verificare)
\end_layout

\begin_layout Subsubsection
data.TutorialDataSQL
\end_layout

\begin_layout Standard
I campi che contiene questa tabella sono i seguenti:
\end_layout

\begin_layout Itemize
id: unique //ordinato in senso logico alla visione dei tutorial
\end_layout

\begin_layout Itemize
link: string //url del link
\end_layout

\begin_layout Subsection
Package Dao 
\begin_inset CommandInset label
LatexCommand label
name "sub:Package-Dao"

\end_inset


\end_layout

\begin_layout Subsubsection
UserDataDaoSQL
\end_layout

\begin_layout Paragraph*
Funzione
\end_layout

\begin_layout Standard
La classeUserDataDaoSQL è l’implementazione di UserDataDao per la base di
 dati SQLite; si occupa della lettura e scrittura dei dati nella base di
 dati
\end_layout

\begin_layout Standard
metodi get e set per ogni campo del DB
\end_layout

\begin_layout Paragraph
Relazione d’uso con altri moduli o Relazioni
\end_layout

\begin_layout Itemize
UserDataDaoSQL
\end_layout

\begin_layout Itemize
UserDataDao
\end_layout

\begin_layout Itemize
UserData
\end_layout

\begin_layout Paragraph
Attributi
\end_layout

\begin_layout Itemize

\series bold
private JavaConnectionSQLite connection
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Itemize

\series bold
public UserDataDaoSQL (JavaConnectionSQLite connection)
\end_layout

\begin_deeper
\begin_layout Standard
Costruttore che dovrà impostare il valore dell'attributio secondo il valore
 del parametro passato
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public User getInfo (User user)
\end_layout

\begin_deeper
\begin_layout Paragraph

\series medium
Riceve come unico parametro un oggetto di tipo User usato per effettuare
 il login (username e password), dal quale prende le informazioni.
 Ritorna l'oggetto User istanziato se presente nel data base, altrimenti
 ritorna null
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public void getMessages (User user, vector<RecordMessage> messages)
\end_layout

\begin_layout Subsubsection
RecordMessageDaoSQL
\end_layout

\begin_layout Standard
metodi get e set per ogni campo del DB
\end_layout

\begin_layout Subsubsection
TutorialDataDaoSQL
\end_layout

\begin_layout Standard
metodi get e set per ogni campo del DB
\end_layout

\begin_layout Subsubsection
UserDataDao 
\end_layout

\begin_layout Standard
è una interfaccia ha solo metodi, da dao a sql
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Standard
Login (user,IP){
\end_layout

\begin_layout Standard
user.setIP(IP);
\end_layout

\begin_layout Standard
user.UserDataShared.setIP(IP);
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
Logout (user,IP){
\end_layout

\begin_layout Standard
user.setIP(IP);
\end_layout

\begin_layout Standard
user.UserDataShared.setIP(IP);
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Subsubsection
RecordMessageDao 
\end_layout

\begin_layout Subsubsection
TutorialDataDao
\end_layout

\begin_layout Subsection
Package Shared 
\begin_inset CommandInset label
LatexCommand label
name "sub:Package-Shared"

\end_inset


\end_layout

\begin_layout Subsubsection
shared.UserData
\end_layout

\begin_layout Standard
Crea gli oggetti UserData
\end_layout

\begin_layout Subsubsection
shared.RecordMessageData
\end_layout

\begin_layout Standard
Crea gli oggetti RecordMessageData
\end_layout

\begin_layout Subsubsection
shared.TutorialData
\end_layout

\begin_layout Standard
Crea gli oggetti TutorialData
\end_layout

\begin_layout Subsection
Package Manager 
\begin_inset CommandInset label
LatexCommand label
name "sub:Package-Manager"

\end_inset


\end_layout

\begin_layout Subsubsection
UserDataManager
\end_layout

\begin_layout Standard
non ha campi dati
\end_layout

\begin_layout Standard
serve per effettuare:
\end_layout

\begin_layout Itemize
Registrazione
\end_layout

\begin_layout Itemize
Modifica nome
\end_layout

\begin_layout Itemize
Modifica cognome
\end_layout

\begin_layout Itemize
Modifica password
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Standard
Registrazione (user,nome,cognome,pass){
\end_layout

\begin_layout Standard
si deve verificare che non ci siano utenti che utilizzino lo user richiesto;
\end_layout

\begin_layout Standard
se lo si usa ->errore
\end_layout

\begin_layout Standard
se non lo si usa -> creo utente
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
Modifica_pass(user,new_pass){
\end_layout

\begin_layout Standard
cerco l'utente user e poi user.pass=new_pass}
\end_layout

\begin_layout Standard
Modifica_nome(user,new_nome){
\end_layout

\begin_layout Standard
cerco l'utente user e poi user.nome=new_nome}
\end_layout

\begin_layout Standard
Modifica_cognome(user,new_cognome){
\end_layout

\begin_layout Standard
cerco l'utente user e poi user.cognome=new_cognome}
\end_layout

\begin_layout Subsubsection
AuthenticationManager
\end_layout

\begin_layout Standard
serve per effettuare login/logout
\end_layout

\begin_layout Standard
no campi dati
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Standard
login(user,pass,IP){
\end_layout

\begin_layout Standard
esiste user? ->se sì errore
\end_layout

\begin_layout Standard
pass corretta? -> se sì errore
\end_layout

\begin_layout Standard
user.UserDataDao.setIP(IP)
\end_layout

\begin_layout Standard
check_message(user) //metodo userDataDAO
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
logout(user){
\end_layout

\begin_layout Standard
user.UserDataDao.set
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
check_message(user)->applica query per sapere se esistono messaggi differiti
 con destinatario=user
\end_layout

\begin_layout Subsubsection
CallManager
\end_layout

\begin_layout Standard
campi dati:nessuno
\end_layout

\begin_layout Standard
Serve per mettere in comunicazione 2 o più utenti
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Standard
Creazione_canali_tra_due_utenti(IP_caller,IP_dest) {Crea il canale di comunicazi
one tramite WebRTC;}
\end_layout

\begin_layout Standard
Termina_chiamata ->?
\end_layout

\begin_layout Standard
Teleconferenza -> ?
\end_layout

\begin_layout Subsubsection
RecordMessageManager
\end_layout

\begin_layout Standard
campi dati: nessuno
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Standard
Record_set(RecordMessage obj) -> chiama il RecordMessageDato per salvare
 il messaggio differito nel DB
\end_layout

\begin_layout Standard
CreateNotification(mittente, destinatario) ->notification_record_message()
 //metodo in NotificationTransfer
\end_layout

\begin_layout Standard
gestore_invio_oggetto(mittente,destinatario) {
\end_layout

\begin_layout Enumerate
sapere qual è l'id del messaggio tramite metodo know_message_id
\end_layout

\begin_layout Enumerate
riceve l'id e prende tale oggetto da shared
\end_layout

\begin_layout Enumerate
preleva_message(id) //metodo di shared 
\end_layout

\begin_layout Enumerate
send_message(id)
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
know_message_id(mittente,destinatario) ->chiede a dao l'id del messaggio
\end_layout

\begin_layout Standard
send_message(id)->invia a transfer il messaggio che 
\begin_inset Quotes eld
\end_inset

crea il canale ?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
Package Transfer 
\begin_inset CommandInset label
LatexCommand label
name "sub:Package-Transfer"

\end_inset


\end_layout

\begin_layout Subsubsection
NotificationTransfer
\end_layout

\begin_layout Standard
notification_call
\end_layout

\begin_layout Standard
notification_recordmessage
\end_layout

\end_body
\end_document
