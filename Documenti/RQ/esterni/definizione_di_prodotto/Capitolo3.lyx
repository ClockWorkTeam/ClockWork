#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Specifica Server
\end_layout

\begin_layout Standard
Il server contiene i seguenti package:
\end_layout

\begin_layout Itemize
Data (vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Package-Data"

\end_inset

)
\end_layout

\begin_layout Itemize
Dao (vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Package-Dao"

\end_inset

)
\end_layout

\begin_layout Itemize
Shared (vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Package-Shared"

\end_inset

)
\end_layout

\begin_layout Itemize
Manager (vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Package-Manager"

\end_inset

)
\end_layout

\begin_layout Itemize
Transfer (vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Package-Transfer"

\end_inset

)
\end_layout

\begin_layout Subsection
Package Data 
\begin_inset CommandInset label
LatexCommand label
name "sub:Package-Data-1"

\end_inset


\end_layout

\begin_layout Subsubsection
data.UserDataSQL
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
n
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
-----------------------
\end_layout

\begin_layout Standard
I campi che contiene questa tabella sono i seguenti:
\end_layout

\begin_layout Itemize
id: intero, incrementale, unique
\end_layout

\begin_layout Itemize
username: char (alfanumerico codice ASCII), unique, almeno 6 caratteri
\end_layout

\begin_layout Itemize
password: string (alfanumerico codice ASCII), almeno 6 caratteri, diverso
 dallo username (no parsing)
\end_layout

\begin_layout Itemize
nome: solo lettere alfabetiche
\end_layout

\begin_layout Itemize
cognome: solo lettere alfabetiche
\end_layout

\begin_layout Subsubsection
data.RecordMassageDataSQL
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
---------------------------
\end_layout

\begin_layout Standard
I campi che contiene questa tabella sono i seguenti:
\end_layout

\begin_layout Itemize
mittente: username
\end_layout

\begin_layout Itemize
destinatario: username
\end_layout

\begin_layout Itemize
creazione: date
\end_layout

\begin_layout Itemize
messaggio: in mediastream (da verificare)
\end_layout

\begin_layout Subsubsection
data.TutorialDataSQL
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
---------------------------------
\end_layout

\begin_layout Standard
I campi che contiene questa tabella sono i seguenti:
\end_layout

\begin_layout Itemize
id: unique //ordinato in senso logico alla visione dei tutorial
\end_layout

\begin_layout Itemize
link: string //url del link
\end_layout

\begin_layout Subsection
Package Dao 
\begin_inset CommandInset label
LatexCommand label
name "sub:Package-Dao"

\end_inset


\end_layout

\begin_layout Subsubsection
UserDataDaoSQL
\end_layout

\begin_layout Paragraph*
Funzione
\end_layout

\begin_layout Standard
\noindent
La classe UserDataDaoSQL è l’implementazione di UserDataDao per la base
 di dati SQLite; si occupa della lettura e scrittura dei dati nella base
 di dati
\end_layout

\begin_layout Paragraph
Relazione d’uso con altri moduli o Relazioni
\end_layout

\begin_layout Itemize
UserDataDaoSQL
\end_layout

\begin_layout Itemize
UserDataDao
\end_layout

\begin_layout Itemize
UserData
\end_layout

\begin_layout Paragraph
Attributi
\end_layout

\begin_layout Itemize
private JavaConnectionSQLite connection
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Itemize

\series bold
public UserDataDaoSQL (JavaConnectionSQLite connection)
\end_layout

\begin_deeper
\begin_layout Standard
Costruttore che dovrà impostare il valore dell'attributo secondo il valore
 del parametro passato
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public User getInfo (User user)
\end_layout

\begin_deeper
\begin_layout Paragraph

\series medium
Riceve come unico parametro un oggetto di tipo User usato per effettuare
 il login (username e password), dal quale prende le informazioni.
 Ritorna l'oggetto User istanziato se presente nel data base, altrimenti
 ritorna null
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public void getMessages (User user, vector<RecordMessage> messages)
\end_layout

\begin_layout Itemize

\series bold
public boolean setInfo (User user, String password, String name, String
 surname)
\end_layout

\begin_deeper
\begin_layout Standard
Riceve come primo parametro un oggetto di tipo User da cui prende le informazion
i.
 Setta i campi dati (password, name e surname) secondo i valori dei parametri
 passati.
 Ritorna un valore booleano che indica se l'operazione è andata o meno a
 buon fine
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public boolean setPassword (User user, String password)
\end_layout

\begin_deeper
\begin_layout Standard
Riceve come primo parametro un oggetto di tipo User da cui prende le informazion
i.
 Setta il campo password con la stringa passatagli come secondo parametro.
 Ritorna un valore booleano che indica se l'operazione è andata o meno a
 buon fine
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public boolean setName (User user, String name)
\end_layout

\begin_deeper
\begin_layout Standard
Riceve come primo parametro un oggetto di tipo User da cui prende le informazion
i.
 Setta il campo name con la stringa passatagli come secondo parametro.
 Ritorna un valore booleano che indica se l'operzione è andata o meno a
 buon fine
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public boolean setSurname (User user, String surname)
\end_layout

\begin_deeper
\begin_layout Standard
Riceve come primo parametro un oggetto di tipo User da cui prende le informazion
i.
 Setta il campo surname con la stringa passatagli come secondo parametro.
 Ritorna un valore booleano che indica se l'operzione è andata o meno a
 buon fine
\end_layout

\end_deeper
\begin_layout Subsubsection
LoginDaoSQL
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
Classe che gestisce i login, implementa i metodi pubblici dell'interfaccia
 LoginDao
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazione d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Itemize
private JavaConnectionSQLite connection
\end_layout

\begin_layout Standard

\series bold
Metodi
\end_layout

\begin_layout Itemize

\series bold
public LoginDaoSQLite (JvaConnectionSQLite server)
\end_layout

\begin_deeper
\begin_layout Standard
Costruttore che dovrà impostare il valore dell'attributo secondo il valore
 del parametro passato
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public boolean login (User user)
\end_layout

\begin_deeper
\begin_layout Standard
Metodo che prova il login.
 Riceve come unico parametro un oggetto di tipo User da cui prende le informazio
ni.
 Ritorna un valore booleano che indica se il login è avvenuto con successo
 o no
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
boolean logout (User user)
\end_layout

\begin_deeper
\begin_layout Standard
Metotodo che effetua il logout.
 Riceve come unico parametro un oggetto di tipo User da cui prende le informazio
ni.
 Ritorna un valore booleano che indica se il logout è avvenuto con successo
 o no
\end_layout

\end_deeper
\begin_layout Subsubsection
RecordMessageDaoSQL
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
Classe che definisce dei metodi per getire i recordmessages nel database
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Itemize
private JavaConnectionSQLite connection
\end_layout

\begin_layout Itemize
private UserDatadao userData
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
metodi get e set per ogni campo del DB
\end_layout

\begin_layout Subsubsection
TutorialDataDaoSQL
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
metodi get e set per ogni campo del DB
\end_layout

\begin_layout Subsubsection
UserDataDao 
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
La classe UserDataDao rappresenta un'interfaccia, viene implementata da
 UserDataDaoSQL che agirà sulla base di dati.
 Fornisce i metodi per il salvataggio e la modifica dei dati presenti nel
 database
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Itemize
mytalk.server.usermanager
\end_layout

\begin_layout Standard

\series bold
Attributi
\end_layout

\begin_layout Standard
Nessuno
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Itemize

\series bold
public User getInfo (User user)
\end_layout

\begin_deeper
\begin_layout Paragraph

\series medium
Riceve come unico parametro un oggetto di tipo User usato per effettuare
 il login (username e password), dal quale prende le informazioni.
 Ritorna l'oggetto User istanziato se presente nel data base, altrimenti
 ritorna null
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public User getContactInfo (String username???)
\end_layout

\begin_deeper
\begin_layout Paragraph

\series medium
Riceve come unico parametro un oggetto di tipo Username???, dal quale prende
 le informazioni.
 Ritorna l'oggetto User istanziato se presente nel data base, altrimenti
 ritorna null
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public void getMessages (User user, Vector<RecordMessage> messages)
\end_layout

\begin_deeper
\begin_layout Standard
Riceve come primo parametro un oggetto di tipo User 
\series medium
usato per effettuare il login (username e password), dal quale prende i
 messaggi.
 Ritorna l'oggetto User istanziato se presente nel data base, altrimenti
 ritorna null
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public boolean setUser (User user)
\end_layout

\begin_layout Itemize
Crea un oggetto di tipo User nel database.
 Ritorna un valore booleano che indica se l'operzione è andata o meno a
 buon fine
\end_layout

\begin_layout Itemize

\series bold
public boolean setInfo (User user, String password, String name, string
 surname)
\end_layout

\begin_deeper
\begin_layout Standard
Riceve come primo parametro un oggetto di tipo User da cui prende le informazion
i.
 Setta i campi dati (password, name e surname) secondo i valori dei parametri
 passati.
 Ritorna un valore booleano che indica se l'operazione è andata o meno a
 buon fine
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public boolean setPassword (User user, String password)
\end_layout

\begin_deeper
\begin_layout Standard
Riceve come primo parametro un oggetto di tipo User da cui prende le informazion
i.
 Setta il campo password con la stringa passatagli come secondo parametro.
 Ritorna un valore booleano che indica se l'operazione è andata o meno a
 buon fine
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public boolean setName (User user, String name)
\end_layout

\begin_deeper
\begin_layout Standard
Riceve come primo parametro un oggetto di tipo User da cui prende le informazion
i.
 Setta il campo name con la stringa passatagli come secondo parametro.
 Ritorna un valore booleano che indica se l'operzione è andata o meno a
 buon fine
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public boolean setSurname (User user, String surname)
\end_layout

\begin_deeper
\begin_layout Standard
Riceve come primo parametro un oggetto di tipo User da cui prende le informazion
i.
 Setta il campo surname con la stringa passatagli come secondo parametro.
 Ritorna un valore booleano che indica se l'operzione è andata o meno a
 buon fine
\end_layout

\end_deeper
\begin_layout Itemize
---------------------------------------------
\end_layout

\begin_layout Standard
Login (user,IP){
\end_layout

\begin_layout Standard
user.setIP(IP);
\end_layout

\begin_layout Standard
user.UserDataShared.setIP(IP);
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
Logout (user,IP){
\end_layout

\begin_layout Standard
user.setIP(IP);
\end_layout

\begin_layout Standard
user.UserDataShared.setIP(IP);
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Subsubsection
LoginDao
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
Interfaccia che contiene i prototipi dei metodi per gestire il login
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
Nessuno
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Itemize

\series bold
public boolean login (User user)
\end_layout

\begin_deeper
\begin_layout Standard
Metodo che prova il login.
 Riceve come unico parametro un oggetto di tipo User da cui prende le informazio
ni.
 Ritorna un valore booleano che indica se il login è avvenuto con successo
 o no
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
boolean logout (User user)
\end_layout

\begin_deeper
\begin_layout Standard
Metotodo che effetua il logout.
 Riceve come unico parametro un oggetto di tipo User da cui prende le informazio
ni.
 Ritorna un valore booleano che indica se il logout è avvenuto con successo
 o no
\end_layout

\end_deeper
\begin_layout Subsubsection
RecordMessageDao 
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
Interfaccia che contiene i protoipi dei metodi per gestire i recordmessages
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
Nessuno
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Itemize

\series bold
public Vector<RecordMessage> getMessages (User user)
\end_layout

\begin_deeper
\begin_layout Standard
Riceve come unico parametro un oggetto di tipo User, dal quale prende i
 messaggi che ha ricevuto.
 Ritorna un vettore dei messaggi inviati all'user
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public boolean createMessage (RecordMessage message, User address)
\end_layout

\begin_deeper
\begin_layout Standard
Inserisce l'oggetto di tipo RecordMessage e ritorna un un valore booleano
 che indica se l'operazione ha avuto successo o meno
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public boolean removeMessage (RecordMessage message, User address)
\end_layout

\begin_deeper
\begin_layout Standard
Elimina l'oggetto di tipo RecordMessage e ritorna un un valore booleano
 che indica se l'operazione ha avuto successo o meno
\end_layout

\end_deeper
\begin_layout Subsubsection
TutorialDataDao
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Subsection
Package Shared 
\begin_inset CommandInset label
LatexCommand label
name "sub:Package-Shared"

\end_inset


\end_layout

\begin_layout Subsubsection
shared.RecordMessage
\end_layout

\begin_layout Standard
Questa classe fungerà da contenitore per i dati riguardanti i Badge che
 sono stati inseriti all’interno del database aziendale
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi privati
\end_layout

\begin_layout Itemize

\series bold
String sender: 
\series default
mittente, colui che crea il messaggio
\end_layout

\begin_layout Itemize

\series bold
String addressee: 
\series default
destinatario, colui che riceve il messaggio
\series bold
 
\end_layout

\begin_layout Itemize

\series bold
String path: 
\series default
indirizzo dove si trova il messaggio differito all'interno del server
\end_layout

\begin_layout Itemize

\series bold
Date dateCreation: 
\series default
data di creazione del messaggio
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi pubblici
\end_layout

\begin_layout Itemize

\series bold
RecordMessage (String sender, String addressee, String path, Date dateCreation):
\series default
 costruttore che dovrà impostare i valori degli attributi secondo i valori
 dei parametri passati
\end_layout

\begin_layout Itemize

\series bold
String getSender(): 
\series default
ritorna il mittente
\end_layout

\begin_layout Itemize

\series bold
String getAddressee(): 
\series default
ritorna il destinatario
\end_layout

\begin_layout Itemize

\series bold
String getPath():
\series default
 ritorna l'indirizzo
\end_layout

\begin_layout Itemize

\series bold
Date getDate(): 
\series default
ritorna la data
\end_layout

\begin_layout Subsubsection
shared.User
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Itemize

\series bold
private String username
\end_layout

\begin_deeper
\begin_layout Standard
Stringa dell'username 
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
private String password
\end_layout

\begin_deeper
\begin_layout Standard
Stringa della password
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
private String name
\end_layout

\begin_deeper
\begin_layout Standard
Stringa del nome
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
private String surname
\end_layout

\begin_deeper
\begin_layout Standard
Stringa del cognome
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
private String IP
\end_layout

\begin_deeper
\begin_layout Standard
Stringa dell'IP
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
private Vector<RecordMessage> messages
\end_layout

\begin_deeper
\begin_layout Standard
Vettore di messaggi
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Itemize

\series bold
public User (String username, String password, String IP)
\end_layout

\begin_deeper
\begin_layout Standard
Costruttore di User per effettuare il login, imposta i parametri con le
 stinghe dell'username e della password dati al login e con la stringa dell'IP
 del client che sta effettuando il login
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public User (String username, String password, String name, String surname,
 String IP)
\end_layout

\begin_deeper
\begin_layout Standard
Costruttore di User che dovrà impostare i valori degli attributi secondo
 i valori dei parametri passati
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public String getUsername ()
\end_layout

\begin_deeper
\begin_layout Standard
Restituisce l'username
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public String getPassword()
\end_layout

\begin_deeper
\begin_layout Standard
Restituisce la password
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public String getName()
\end_layout

\begin_deeper
\begin_layout Standard
Restituisce il nome
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public String getSurname()
\end_layout

\begin_deeper
\begin_layout Standard
Restituisce il cognome
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public String getIP()
\end_layout

\begin_deeper
\begin_layout Standard
Restituisce l'IP
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public void setPassword (String password)
\end_layout

\begin_deeper
\begin_layout Standard
Imposta la password
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public void setName (String name)
\end_layout

\begin_deeper
\begin_layout Standard
Imposta la password
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public void setSurname (String surname)
\end_layout

\begin_deeper
\begin_layout Standard
Imposta la password
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public void setIP (String IP)
\end_layout

\begin_deeper
\begin_layout Standard
Imposta la password
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public Vector<RecordMessage> getMessages()
\end_layout

\begin_deeper
\begin_layout Standard
Ritorna il vettore di messaggi
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public void setMessages (Vector<RecordMessage> messages)
\end_layout

\begin_deeper
\begin_layout Standard
Imposta i messaggi ricevuti
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public void setMessage (RecordMessage message)
\end_layout

\begin_deeper
\begin_layout Standard
Aggiunge un messaggio ai messaggi ricevuti
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
public void removeMesssage (RecordMessage message)
\end_layout

\begin_deeper
\begin_layout Standard
Elimina un messaggio dai messaggi ricevuti
\end_layout

\end_deeper
\begin_layout Subsubsection
shared.UserData
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
---------------------------
\end_layout

\begin_layout Standard
Crea gli oggetti UserData
\end_layout

\begin_layout Subsubsection
shared.RecordMessageData
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
--------------------------------
\end_layout

\begin_layout Standard
Crea gli oggetti RecordMessageData
\end_layout

\begin_layout Subsubsection
shared.TutorialData
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
----------------------------------
\end_layout

\begin_layout Standard
Crea gli oggetti TutorialData
\end_layout

\begin_layout Subsection
Package Manager 
\begin_inset CommandInset label
LatexCommand label
name "sub:Package-Manager"

\end_inset


\end_layout

\begin_layout Subsubsection
UserDataManager
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
------------------------------------
\end_layout

\begin_layout Standard
non ha campi dati
\end_layout

\begin_layout Standard
serve per effettuare:
\end_layout

\begin_layout Itemize
Registrazione
\end_layout

\begin_layout Itemize
Modifica nome
\end_layout

\begin_layout Itemize
Modifica cognome
\end_layout

\begin_layout Itemize
Modifica password
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Standard
Registrazione (user,nome,cognome,pass){
\end_layout

\begin_layout Standard
si deve verificare che non ci siano utenti che utilizzino lo user richiesto;
\end_layout

\begin_layout Standard
se lo si usa ->errore
\end_layout

\begin_layout Standard
se non lo si usa -> creo utente
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
Modifica_pass(user,new_pass){
\end_layout

\begin_layout Standard
cerco l'utente user e poi user.pass=new_pass}
\end_layout

\begin_layout Standard
Modifica_nome(user,new_nome){
\end_layout

\begin_layout Standard
cerco l'utente user e poi user.nome=new_nome}
\end_layout

\begin_layout Standard
Modifica_cognome(user,new_cognome){
\end_layout

\begin_layout Standard
cerco l'utente user e poi user.cognome=new_cognome}
\end_layout

\begin_layout Subsubsection
AuthenticationManager
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
-----------------------------------
\end_layout

\begin_layout Standard
serve per effettuare login/logout
\end_layout

\begin_layout Standard
no campi dati
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Standard
login(user,pass,IP){
\end_layout

\begin_layout Standard
esiste user? ->se sì errore
\end_layout

\begin_layout Standard
pass corretta? -> se sì errore
\end_layout

\begin_layout Standard
user.UserDataDao.setIP(IP)
\end_layout

\begin_layout Standard
check_message(user) //metodo userDataDAO
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
logout(user){
\end_layout

\begin_layout Standard
user.UserDataDao.set
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
check_message(user)->applica query per sapere se esistono messaggi differiti
 con destinatario=user
\end_layout

\begin_layout Subsubsection
CallManager
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
----------------------------------------
\end_layout

\begin_layout Standard
campi dati:nessuno
\end_layout

\begin_layout Standard
Serve per mettere in comunicazione 2 o più utenti
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Standard
Creazione_canali_tra_due_utenti(IP_caller,IP_dest) {Crea il canale di comunicazi
one tramite WebRTC;}
\end_layout

\begin_layout Standard
Termina_chiamata ->?
\end_layout

\begin_layout Standard
Teleconferenza -> ?
\end_layout

\begin_layout Subsubsection
RecordMessageManager
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
--------------------------------
\end_layout

\begin_layout Standard
campi dati: nessuno
\end_layout

\begin_layout Paragraph
Metodi
\end_layout

\begin_layout Standard
Record_set(RecordMessage obj) -> chiama il RecordMessageDato per salvare
 il messaggio differito nel DB
\end_layout

\begin_layout Standard
CreateNotification(mittente, destinatario) ->notification_record_message()
 //metodo in NotificationTransfer
\end_layout

\begin_layout Standard
gestore_invio_oggetto(mittente,destinatario) {
\end_layout

\begin_layout Enumerate
sapere qual è l'id del messaggio tramite metodo know_message_id
\end_layout

\begin_layout Enumerate
riceve l'id e prende tale oggetto da shared
\end_layout

\begin_layout Enumerate
preleva_message(id) //metodo di shared 
\end_layout

\begin_layout Enumerate
send_message(id)
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
know_message_id(mittente,destinatario) ->chiede a dao l'id del messaggio
\end_layout

\begin_layout Standard
send_message(id)->invia a transfer il messaggio che 
\begin_inset Quotes eld
\end_inset

crea il canale ?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
Package Transfer 
\begin_inset CommandInset label
LatexCommand label
name "sub:Package-Transfer"

\end_inset


\end_layout

\begin_layout Subsubsection
NotificationTransfer
\end_layout

\begin_layout Standard

\series bold
Funzione
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Relazioni d'uso con altri moduli
\end_layout

\begin_layout Standard
xxxxxxxxx
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Attributi
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
Metodi
\end_layout

\begin_layout Standard
---------------------------------------
\end_layout

\begin_layout Standard
notification_call
\end_layout

\begin_layout Standard
notification_recordmessage
\end_layout

\end_body
\end_document
