#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Codifica
\begin_inset CommandInset label
LatexCommand label
name "Codifica"

\end_inset


\end_layout

\begin_layout Subsection
Intestazione del file
\end_layout

\begin_layout Standard
Ogni file di codice corrisponderà esattamente ad ogni singola classe, ed
 inizierà con un'intestazione che dovrà rispecchiare il seguente standard:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

* Nome: {nome del file}
\end_layout

\begin_layout Plain Layout

* Package: {package di appartenenza}
\end_layout

\begin_layout Plain Layout

* Autore: {autore del file}
\end_layout

\begin_layout Plain Layout

* Data: {data di creazione del file}
\end_layout

\begin_layout Plain Layout

* Versione: {versione del file}
\end_layout

\begin_layout Plain Layout

*
\end_layout

\begin_layout Plain Layout

* Modifiche:
\end_layout

\begin_layout Plain Layout

* +---------+---------------+------------------+
\end_layout

\begin_layout Plain Layout

* | Data    | Programmatore | Modifiche        |
\end_layout

\begin_layout Plain Layout

* +---------+---------------+------------------+
\end_layout

\begin_layout Plain Layout

* |  AAMMGG |  CognomeNome  | - [label]metodo1 |
\end_layout

\begin_layout Plain Layout

* |         |               | - [label]metodo2 |
\end_layout

\begin_layout Plain Layout

* |         |               | - ....
           |
\end_layout

\begin_layout Plain Layout

* +---------+---------------+------------------+
\end_layout

\begin_layout Plain Layout

*
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
dove:
\end_layout

\begin_layout Itemize

\series bold
Nome
\series default
: sarà il nome del file comprensivo di estensione
\end_layout

\begin_layout Itemize

\series bold
Package
\series default
: sarà comprensivo della gerarchia del package
\end_layout

\begin_layout Itemize

\series bold
Autore
\series default
: sarà l'autore del file e non necessariamente il programmatore che sta
 modificando il file attualmente
\end_layout

\begin_layout Itemize

\series bold
Data
\series default
: sarà la data di creazione del file
\end_layout

\begin_layout Itemize

\series bold
Versione
\series default
: indica la versione attuale del file
\end_layout

\begin_layout Itemize

\series bold
Modifiche
\series default
: rappresenta la tabella di avanzamento del file.
 Per convenzione:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Data
\series default
: rappresenta la data dell'avvenuta modifica nel formato AAMMGG con le cifre:
\end_layout

\begin_deeper
\begin_layout Itemize
AA che rappresentano l'anno
\end_layout

\begin_layout Itemize
MM che rappresentano il mese con eventuali zeri iniziali
\end_layout

\begin_layout Itemize
GG che rappresentano il giorno con eventuali zeri iniziali
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Cognome
\series default
Nome: rappresenta il programmatore che ha effettuato le modifiche.
 Conterrà la prima lettera del cognome seguita dalla prima lettera del nome
\begin_inset Foot
status open

\begin_layout Plain Layout
Nel caso in cui il programmatore abbia un cognome o un nome composto da
 più parole, si prenderà la prima lettera di ogni parola.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Modifiche
\series default
: rappresenta la lista dei cambiamenti.
 Per ogni riga dovrà esserci un solo cambiamento.
 
\emph on
Label
\emph default
 potrà essere:
\end_layout

\begin_deeper
\begin_layout Description

\series medium
\emph on
[+]
\emph default
:
\series default
 per indicare la creazione del metodo
\end_layout

\begin_layout Description

\series medium
\emph on
[-]
\emph default
:
\series default
 per indicare l'eliminazione del metodo
\end_layout

\begin_layout Description

\series medium
\emph on
[*]
\emph default
:
\series default
 per indicare la modifica del metodo
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Versionamento
\end_layout

\begin_layout Standard
Il versionamento dei file di codice sarà conforme al seguente formalismo:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset

{X
\begin_inset Foot
status open

\begin_layout Plain Layout
Da ora in poi questo indice verrà denominato come
\emph on
 indice maggiore
\emph default
.
 
\end_layout

\end_inset

}.{Y
\begin_inset Foot
status open

\begin_layout Plain Layout
Da ora in poi questo indice verrà denominato come
\emph on
 indice minore
\emph default
.
\end_layout

\end_inset

}
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
ove:
\end_layout

\begin_layout Itemize

\series bold
X
\series default
: è un numero intero incrementale corrispondente alla versione completa
 e stabile del file
\begin_inset Foot
status open

\begin_layout Plain Layout
Un file completo è stabile quando tutte le funzionalità pubbliche obbligatorie
 sono definite e si considerano funzionanti.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Y
\series default
: è un numero intero incrementale corrispondente alla modifica Y-esima effettuat
a dall'ultima versione stabile del file
\end_layout

\begin_layout Subsubsection
Avanzamento di versione
\end_layout

\begin_layout Subsubsection*
Incremento dell'indice maggiore
\end_layout

\begin_layout Standard
Ogni volta che un file è completo e stabile, viene incrementato l'indice
 maggiore.
 Questo comporta ad impostare l'indice minore a zero (0).
\end_layout

\begin_layout Standard
Il file in questione potrà cominciare a sostenere i test per confermare
 l'effettivo funzionamento delle funzionalità.
\end_layout

\begin_layout Subsubsection*
Incremento dell'indice minore
\end_layout

\begin_layout Standard
Ogni volta che un file subisce una modifica viene incrementato l'indice
 minore.
\end_layout

\begin_layout Standard
\noindent
Si ricorda che tale indice viene azzerato ad ogni incremento dell'indice
 maggiore.
\end_layout

\begin_layout Subsection
Convenzioni di codifica - Java
\end_layout

\begin_layout Subsubsection
Struttura interna delle classi
\end_layout

\begin_layout Standard
All'interno di una classe dovranno comparire esattamente nel seguente ordine:
\end_layout

\begin_layout Enumerate
Variabili statiche
\end_layout

\begin_layout Enumerate
Variabili di istanza
\end_layout

\begin_layout Enumerate
Costruttori
\end_layout

\begin_layout Enumerate
Metodi
\end_layout

\begin_layout Subsubsection
Struttura del codice
\end_layout

\begin_layout Itemize

\series bold
Dichiarazione di variabili
\series default
: per ogni linea ci sarà al massimo una dichiarazione di variabile
\end_layout

\begin_layout Itemize

\series bold
Blocchi di inizializzazione
\series default
: le variabili utilizzate in un blocco saranno dichiarate all'inizio del
 blocco stesso
\end_layout

\begin_layout Itemize

\series bold
Nomenclatura variabili
\series default
: non ci saranno variabili con lo stesso nome
\end_layout

\begin_layout Itemize

\series bold
Indentazione del codice
\series default
: non si userà il comando
\emph on
 tab
\emph default
, ma tre caratteri di spaziatura
\end_layout

\begin_layout Itemize

\series bold
Separazione dei metodi
\series default
: i metodi saranno separati tramite una linea vuota
\end_layout

\begin_layout Itemize

\series bold
Separazione dei blocchi di codice
\series default
: i blocchi logici indipendenti saranno separati con una linea vuota
\end_layout

\begin_layout Itemize

\series bold
Enfatizzazione delle parole chiave
\series default
: le parole chiavi e le parentesi saranno separate da uno spazio
\end_layout

\begin_layout Itemize

\series bold
Parentesi graffe
\series default
: le parentesi graffe che aprono un blocco di codice saranno posizionate
 nella stessa linea della parola chiave a cui appartengono; le parentesi
 graffe che chiudono il blocco saranno scritte in una linea indipendente,
 come nell'esempio:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (condizione){
\end_layout

\begin_layout Plain Layout

  blocco di codice;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
Convenzioni sui nomi
\end_layout

\begin_layout Itemize

\series bold
Package
\series default
: sostantivi brevi ed evocativi la cui iniziale è minuscola.
 Nel caso siano composte da più parole queste saranno unite e tutte le iniziali
 saranno minuscole
\end_layout

\begin_layout Itemize

\series bold
Classi:
\series default
 sostantivi la cui prima lettera sarà maiuscola.
 Se composti da più parole, queste saranno unite e l'iniziale di ogni parola
 sarà maiuscola
\end_layout

\begin_layout Itemize

\series bold
Interfacce:
\series default
 stessa nomenclatura delle classi
\end_layout

\begin_layout Itemize

\series bold
Metodi:
\series default
 verbi la cui prima lettera deve essere minuscola.
 Se composti da più parole, queste saranno unite e l'iniziale di ogni parola
 sarà maiuscola
\end_layout

\begin_layout Itemize

\series bold
Variabili:
\series default
 nomi brevi ed evocativi la cui iniziale è minuscola.
 Nel caso siano composte da più parole, si utilizzerà il simbolo di
\emph on
 underscore
\end_layout

\begin_layout Itemize

\series bold
Costanti:
\series default
 nomi brevi ed evocativi, scritte in maiuscolo.
 Nel caso siano composte da più parole si dovrebbe utilizzare il simbolo
 di
\emph on
 underscore
\end_layout

\begin_layout Subsection
Convenzioni di codifica - HTML5
\end_layout

\begin_layout Standard
Anche se i moderni browser sono in grado di interpretare alcuni errori,
 è bene seguire le convenzioni sottoindicate (in caso di dubbio specifico
 non risolto nelle norme, si faccia riferimento a 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.html-5.com/cheat-sheet/
\end_layout

\end_inset

).
\end_layout

\begin_layout Subsubsection
Tag
\end_layout

\begin_layout Itemize

\series bold
Scrittura dei tag
\series default
: tutti i tag devono essere scritti in minuscolo
\end_layout

\begin_layout Itemize

\series bold
Chiusura dei tag
\series default
: i tag devono essere sempre chiusi:
\end_layout

\begin_deeper
\begin_layout Itemize
Tag non vuoti: saranno composti da un tag di apertura seguiti dal blocco
 e il tag di chiusura.
 Ad esempio:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<p> Blocco1 </p>
\end_layout

\begin_layout Plain Layout

<p> Blocco2 </p>
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Tag vuoti: l'apertura del tag e la rispettiva chiusura possono essere nella
 stessa parentesi uncinata (la chiusura del tag deve avvenire alla fine
 di questo).
 Ad esempio:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Blocco <br/>
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\series bold
Tag innestati
\series default
: in questo caso, la chiusura dei tag potrà avvenire solo se i tag dentro
 ad esso sono stati chiusi (l'ordine di chiusura dei tag deve essere inverso
 a quello di apertura).
 Ad esempio:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<p> L'ultima parola è in <b>grassetto</b>.</p>
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Convenzioni di codifica - CSS3
\end_layout

\begin_layout Standard
Il codice 
\bar under
CSS3
\bar default
 deve essere valido.
 Tutte le specifiche si possono trovare presso il sito 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.w3schools.com/cssref/css3_browsersupport.asp
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Selettori
\end_layout

\begin_layout Standard
I selettori devono:
\end_layout

\begin_layout Itemize
Essere scritti su una riga
\end_layout

\begin_layout Itemize
Essere divisi da uno spazio
\end_layout

\begin_layout Itemize

\series bold
Parentesi graffe
\series default
:
\end_layout

\begin_deeper
\begin_layout Itemize
Di apertura: deve essere nella riga del selettore a cui appartiene
\end_layout

\begin_layout Itemize
Di chiusura: deve essere in una riga a sé stante, senza alcuna indentazione
\end_layout

\end_deeper
\begin_layout Itemize
Ogni gruppo di selettori non legati logicamente saranno divisi da una linea
 vuota
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.menu_navigazione_principale{
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

.menu_navigazione_secondario{
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

.content{
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Selettori unici
\series default
: ogni selettore sarà su una linea singola.
 Ad esempio:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#form td.uno,
\end_layout

\begin_layout Plain Layout

#form td.due{
\end_layout

\begin_layout Plain Layout

   blocco codice
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
Proprietà
\end_layout

\begin_layout Standard
Le proprietà sono la parte interna alle parentesi graffe e descrivono come
 i selettori devono essere visualizzati.
\end_layout

\begin_layout Standard
Ogni proprietà deve:
\end_layout

\begin_layout Itemize
Essere su una riga
\end_layout

\begin_layout Itemize
Indentata con tre spazi
\end_layout

\begin_layout Itemize
Avere uno spazio dopo il nome della proprietà e uno prima del valore, ad
 esempio:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.selettore{
\end_layout

\begin_layout Plain Layout

   proprietà : valore;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Terminare con un punto e virgola (;)
\end_layout

\begin_layout Itemize
Le proprietà multivalore devono essere separate da una virgola seguita da
 uno spazio
\end_layout

\begin_layout Subsection
Convenzioni di codifica - Javascript
\end_layout

\begin_layout Standard
Per tali convenzioni si farà riferimento alla guida che Google mette a disposizi
one, tramite il sito 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Convenzioni di codifica - SQLite
\end_layout

\begin_layout Standard
Per SQLite si dovranno seguire tali convenzioni:
\end_layout

\begin_layout Itemize
Nomi delle tabelle: in minuscolo.
 Se composti da più parole, queste saranno unite con la prima lettera maiuscola
\end_layout

\begin_layout Itemize
Nomi delle colonne: in minuscolo.
 Se composti da più parole, saranno separate da un simbolo di
\emph on
 underscore
\end_layout

\begin_layout Subsection

\series bold
Metriche
\end_layout

\begin_layout Standard
In base ai criteri elencati nella sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Ambiente-di-verifica"

\end_inset

 si definiscono le seguenti metriche per la composizione di codice di qualità:
\end_layout

\begin_layout Itemize

\series bold
Complessità ciclomatica:
\series default
 rappresenta la complessità di un metodo, basata sulla misurazione del numero
 di cammini linearmente indipendenti che attraversano il grafo di flusso
 di controllo, dove:
\end_layout

\begin_deeper
\begin_layout Itemize
Nodi: rappresentano gruppi indivisibili di istruzioni
\end_layout

\begin_layout Itemize
Archi: connettono due nodi se le istruzioni di un nodo possono essere eseguite
 immediatamente dopo le istruzioni dell'altro nodo
\end_layout

\begin_layout Standard
Un valore elevato di complessità riduce la manutenibilità e la possibilità
 di riuso del metodo: se dovesse risultare tale, parte delle sue funzionalità
 devono essere demandate ad altri metodi da richiamare.
\end_layout

\begin_layout Standard
Particolare attenzione va posta sulla stima di questo valore: il costrutto
 switch, ad esempio, moltiplica i cammini linearmente indipendenti e quindi
 può comportare una misurazione di complessità ciclomatica molto elevata
 (e oltre i limiti imposti).
 Tuttavia potrebbe verificarsi l'eventualità che, al fine di garantire una
 velocità di esecuzione maggiore per un certo metodo, si decida di assumere
 limiti di complessità ciclomatica più laschi.
 I valori di complessità ciclomatica misurati verranno trattati, dunque,
 con le dovute considerazioni.
 Il valore ideale di complessità ciclomatica massima posto come obiettivo
 è dieci
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Peso delle classi:
\series default
 è la somma totale della complessità ciclomatica di tutti i metodi appartenenti
 ad una determinata classe.
 Il valore deve essere ragionevole, e dove venisse ritenuto troppo alto,
 si procederà ad aumentare il numero di metodi della classe in considerazione,
 oppure verrà affidata parte dei compiti ad una o più nuove classi coese
\end_layout

\begin_layout Itemize

\series bold
Numero di parametri:
\series default
 vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Specifica-Tecnica"

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Numero di campi dati per classe:
\series default
 un numero elevato di attributi interni ad una classe potrebbe palesare
 la necessità di incapsulamento di parte di essi in nuove classi coese,
 che forniscano inoltre metodi utili al loro utilizzo
\end_layout

\begin_layout Itemize

\series bold
Numero di variabili locali:
\series default
 denota il numero di variabili locali interne a ciascun metodo.
 Come per il numero di campi dati per classe, potrebbe essere necessario
 incapsulare alcune di queste variabili in nuove classi coese qualora il
 numero sia troppo elevato
\end_layout

\begin_layout Itemize

\series bold
Numero di livelli di annidamento:
\series default
 vedasi sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Specifica-Tecnica"

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Grado di accoppiamento:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Indice di utilità
\begin_inset Foot
status open

\begin_layout Plain Layout
Indica il numero di classi esterne al package che dipendono da classi interne
 ad esso.
\end_layout

\end_inset

:
\series default
 se troppo basso indicherà che il package non fornisce molte funzionalità
 al suo esterno, potrebbe essere scarsamente utile; se troppo alto indicherà
 che altre classi sono strettamente dipendenti dal package in questione,
 e quindi potrebbe accadere che eventuali modifiche ad esso comportino costi
 elevati di adattamento delle classi che vi dipendono, qualora non fosse
 stato progettato adeguatamente il sistema di interfacce
\end_layout

\begin_layout Itemize

\series bold
Indice di dipendenza
\begin_inset Foot
status open

\begin_layout Plain Layout

\size normal
Indica il numero di classi interne al package che dipendono da classi esterne
 ad esso.
\end_layout

\end_inset

: 
\series default
va sempre minimizzato, aumentando le funzionalità proprie di un package,
 senza la necessità di affidarsi al servizio offerto da altre classi esterne
\end_layout

\end_deeper
\begin_layout Subsection
Procedura di Verifica e Validazione
\end_layout

\begin_layout Standard
Di seguito vengono riportate le norme che regolano le attività di verifica
 riguardanti al codice
\begin_inset Foot
status open

\begin_layout Plain Layout
Per una specifica dettagliata delle tecniche e delle modalità con cui verranno
 condotte tali attività si rimanda al
\family typewriter
 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
PdQ}
\end_layout

\end_inset

.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Analisi statica
\begin_inset CommandInset label
LatexCommand label
name "Analisi-statica"

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Analisi del flusso di controllo:
\series default
 si verificherà, analizzando i vari flussi possibili, che il codice segua
 la sequenza specificata.
 Si accerterà che il codice sia ben strutturato, che non esistano parti
 di codice che non vengono mai raggiunte o che non terminano
\end_layout

\begin_layout Itemize

\series bold
Analisi di flusso dei dati:
\series default
 bisogna assicurare che il flusso di dati non usi variabili non ancora inizializ
zate o prive di valore, oppure che si scriva più volte prima di usare una
 variabile
\end_layout

\begin_layout Itemize

\series bold
Analisi flusso d'informazione:
\series default
 bisogna verificare che input ed output di ogni unità di codice (o più unità)
 rientrino nelle specifiche del programma
\end_layout

\begin_layout Itemize

\series bold
Verifica formale del codice:
\series default
 bisogna verificare la correttezza del codice rispetto alla specifica dei
 requisiti
\end_layout

\begin_layout Subsubsection
Analisi dinamica
\begin_inset CommandInset label
LatexCommand label
name "sub:Analisi-dinamica"

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Test di unità:
\series default
 test applicati alle singole unità di sistema al fine di verificare la presenza
 di malfunzionamenti.
 Bisognerà fare tali test con il massimo grado di parallelismo
\end_layout

\begin_layout Itemize

\series bold
Test di integrazione:
\series default
 test effettuato per verificare che i componenti formati dall'unione delle
 varie unità che hanno superato il test di unità cooperino nel modo corretto
\end_layout

\begin_layout Itemize

\series bold
Test di sistema e collaudo:
\series default
 test eseguito sull’intero sistema allo scopo di accertare che il sistema
 prodotto adempie ai requisiti richiesti, che riesca ad adattarsi correttamente
 al contesto richiesto dal proponente.
 Il collaudo sarà sul software finito e, se superato, seguirà il rilascio
 del prodotto
\end_layout

\begin_layout Itemize

\series bold
Test di regressione
\series default
: nel caso bisogna apportare delle modifiche ad un singolo componente, si
 ricominceranno i test a partire da quelli di unità
\end_layout

\end_body
\end_document
