#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Guida allo sviluppo
\end_layout

\begin_layout Standard
Il 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
NOMEGRUPPO}
\end_layout

\end_inset

, in fase di progettazione, ha pensato di rendere il prodotto 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
PROGETTO}
\end_layout

\end_inset

 facilmente estendibile in merito a:
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Itemize
Servizi di comunicazione
\end_layout

\begin_layout Subsection
Database
\end_layout

\begin_layout Standard
Quando il progetto 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
PROGETTO}
\end_layout

\end_inset

 è iniziato, era richiesto un database leggero, di conseguenza è stato utilizzat
o SQLite.
 Si è deciso dunque di implementare nel package 
\family typewriter
\series bold
mytalk.server.dao
\family default
\series default
 la classe 
\family typewriter
\series bold
JavaConnectionSQLite
\family default
\series default
, in maniera da accedere al database da una sola classe, tuttavia nel
 caso si volesse adottare un database diverso da SQLite basterà sostituire
 quest'ultima classe con un' altra classe che fornisca il collegamento 
 al nuovo database scelto
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/patternDao.pdf

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Estensione database
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Servizi di comunicazione
\end_layout

\begin_layout Standard
Durante la fase di progettazione si è deciso di creare per ogni funzione
 prevista da 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
PROGETTO}
\end_layout

\end_inset

 una classe nel package 
\family typewriter
\series bold
mytalk.client.view
\family default
\series default
 che si occupa di gestire a livello visivo l'operazione, una classe nel
 package 
\family typewriter
\series bold
mytalk.client.communication
\family default
\series default
 che si occupa di gestire la comunicazione tra client e server, ed una classe
 nel package 
\family typewriter
\series bold
mytalk.server.transfer 
\family default
\series default
che si occupa di gestire la richiesta del client a cui invia una risposta.
 Se si vuole aggiungere una nuova funzionalità comunicativa al progetto 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
PROGETTO}
\end_layout

\end_inset

 basterà aggiungere una classe per ogni package precedentemente
 elencato.
 Le figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Aggiunta-funzionalità-al-client"

\end_inset

 e 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Aggiunta-funzionalità-al-server"

\end_inset

 illustrano come aggiungere nuove funzionalità al progetto
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
PROGETTO}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/newClientDiagram.pdf
	scale 30

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Aggiunta funzionalità al client 
\begin_inset CommandInset label
LatexCommand label
name "fig:Aggiunta-funzionalità-al-client"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/newServerDiagram.pdf
	scale 30

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Aggiunta funzionalità al server 
\begin_inset CommandInset label
LatexCommand label
name "fig:Aggiunta-funzionalità-al-server"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Istruzioni per la creazione di una classe in 
\family typewriter
\series bold
mytalk.client.view
\end_layout

\begin_layout Standard
Per poter realizzare una nuova classe nel package 
\family typewriter
\series bold
mytalk.client.view
\family default
\series default
 si deve:
\end_layout

\begin_layout Enumerate
Indicare le classi che andremo ad utilizzare per la creazione della nuova
 vista.
 Tra queste bisognerà sempre inserire nell'elenco jquery, underscore e backbone.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

define(['jquery',   
\end_layout

\begin_layout Plain Layout

'underscore',
\end_layout

\begin_layout Plain Layout

'backbone',
\end_layout

\begin_layout Plain Layout

'communication/NewFunctionCommunication' ],
\end_layout

\begin_layout Plain Layout

function($, _, Backbone, SideView, NewFunctionCommunication){
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Estendere la nuova classe da Backbone.View
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var NewFunctionView = Backbone.View.extend(
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Scrivere il codice della nuova vista
\end_layout

\begin_layout Enumerate
Inserire se necessario, nelle viste appropriate, il punto in cui la nuova
 vista viene usata
\end_layout

\begin_layout Subsubsection
Istruzioni per la creazione di una classe in 
\family typewriter
\series bold
mytalk.client.communication
\end_layout

\begin_layout Standard
Per poter realizzare una nuova classe nel package 
\family typewriter
\series bold
mytalk.client.communication
\family default
\series default
 si deve:
\end_layout

\begin_layout Enumerate
Inserire subito la seguente linea di codice:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

define(['connection'], function(Connection){
\end_layout

\end_inset

 Questo permette la comunicazione con il server con il seguente comando
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Connection.send(Messaggio da inviare);
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Se necessario creare variabili visibili all'interno di tutto il codice della
 classe, farlo appena eseguito il punto 1
\end_layout

\begin_layout Enumerate
Inserire il codice della nuova classe communication all'interno di un'istruzione
 return
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

return{
\end_layout

\begin_layout Plain Layout

	funzioni della nuova communication
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
Istruzioni per la creazione di una classe in 
\family typewriter
\series bold
mytalk.server.transfer
\end_layout

\begin_layout Standard
Per poter realizzare una nuova classe nel package 
\family typewriter
\series bold
mytalk.server.transfer
\family default
\series default
 si deve:
\end_layout

\begin_layout Enumerate
Importare le seguenti librerie
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import org.jwebsocket.api.WebSocketPacket; 
\end_layout

\begin_layout Plain Layout

import org.jwebsocket.kit.RawPacket;
\end_layout

\begin_layout Plain Layout

import org.jwebsocket.kit.WebSocketServerEvent;
\end_layout

\begin_layout Plain Layout

import org.jwebsocket.listener.WebSocketServerTokenEvent; 
\end_layout

\begin_layout Plain Layout

import org.jwebsocket.token.Token;
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Creare una nuova classe che estende da ListenerTransfer
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class NewFunctionTransfer extends ListenerTransfer
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Scrivere il codice della nuova classe
\end_layout

\end_body
\end_document
