#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Architettura Generale
\end_layout

\begin_layout Standard
L'applicativo è stato diviso in due sistemi, ovvero il 
\bar under
client
\bar default
 e il 
\bar under
server
\bar default
, come indicato nel
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Architettura-generale"

\end_inset

.
 L'indice di accoppiamento tra questi due sottosistemi sarà tenuto al minimo
 necessario.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/architetturaGenerale.pdf
	scale 85

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Architettura generale
\begin_inset CommandInset label
LatexCommand label
name "fig:Architettura-generale"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Client
\end_layout

\begin_layout Standard
Si occuperà di gestire l'interfaccia visibile all'utente le cui operazioni
 verranno poi inviate al server.
 Il lato client è stato suddiviso nel seguente modo:
\end_layout

\begin_layout Itemize

\series bold
CCLI1:
\series default
 autenticazione
\end_layout

\begin_layout Itemize

\series bold
CCLI2:
\series default
 gestione dati
\end_layout

\begin_layout Itemize

\series bold
CCLI3:
\series default
 tutorial
\end_layout

\begin_layout Itemize

\series bold
CCLI4:
\series default
 visualizzazione lista utenti
\end_layout

\begin_layout Itemize

\series bold
CCLI5:
\series default
 gestione notifiche
\end_layout

\begin_layout Itemize

\series bold
CCLI6:
\series default
 chiamata
\end_layout

\begin_layout Itemize

\series bold
CCLI7:
\series default
 messaggio differito
\end_layout

\begin_layout Itemize

\series bold
CCLI8:
\series default
 chat
\end_layout

\begin_layout Itemize

\series bold
CCLI9:
\series default
 invio file
\end_layout

\begin_layout Subsection
Server
\end_layout

\begin_layout Standard
Si occuperà di gestire le richieste fatte e di inviare una risposta al client.
 Il server è stato suddiviso in
\end_layout

\begin_layout Itemize

\series bold
CSER1:
\series default
 autenticazione
\end_layout

\begin_layout Itemize

\series bold
CSER2:
\series default
 gestione dati utente
\end_layout

\begin_layout Itemize

\series bold
CSER3:
\series default
 inizializzazione chiamata
\end_layout

\begin_layout Itemize

\series bold
CSER4: 
\series default
trasferimento file e messaggi di testo
\end_layout

\begin_layout Itemize

\series bold
CSER5:
\series default
 salvataggio messaggio in differita
\end_layout

\begin_layout Itemize

\series bold
CSER6:
\series default
 tutorial
\end_layout

\begin_layout Subsection
Architettura dell'intero sistema
\end_layout

\begin_layout Standard
Facendo riferimento al
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Architettura-generale-dell'intero-sistema"

\end_inset

 si può avere quindi una visione dell'architettura e delle relazioni tra
 gli strati:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/architetturaGeneraleInteroSistema.pdf
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Architettura generale dell'intero sistema
\begin_inset CommandInset label
LatexCommand label
name "fig:Architettura-generale-dell'intero-sistema"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
mytalk
\family default
 incorpora l'intero sistema
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
mytalk.client
\family default
 racchiude al suo interno il lato client di 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
PROGETTO}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
mytalk.client.view
\family default
 racchiude al suo interno l'interfaccia grafica e la parte logica.
  Questo strato viene definito dal framework Backbone.js
\end_layout

\begin_layout Itemize

\family typewriter
mytalk.client.model
\family default
 contiene localmente le informazioni necessarie a popolare le viste
\end_layout

\begin_layout Itemize

\family typewriter
mytalk.client.communication
\family default
 si occupa della gestione delle comunicazioni tra client e server e tra
 più client
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
mytalk.server
\family default
 racchiude al suo interno il lato server di 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
PROGETTO}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
mytalk.server.transfer
\family default
 gestisce il collegamento tra server e client e le operazioni di comunicazione
 tra peers
\end_layout

\begin_layout Itemize

\series bold
mytalk.server.manager
\family typewriter
 
\family default
\series default
racchiude al suo interno:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
mytalk.server.functionmanager
\family default
 gestisce le operazioni di conversione dati per lo strato transfer
\end_layout

\begin_layout Itemize

\family typewriter
mytalk.server.usermanager
\family default
 gestisce le operazioni di comunicazione tra lo strato transfer e lo strato
 data
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
mytalk.server.data 
\series default
racchiude al suo interno:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
mytalk.server.dao
\family default
\series bold
 
\series default
gestisce la base di dati, ovvero l'inserimento, la modifica e la rimozione
 dei dati e la loro permanenza
\end_layout

\begin_layout Itemize

\family typewriter
mytalk.server.shared
\family default
 contiene al suo interno una copia del database in modo da ridurre al minimo
 gli accessi a quest'ultimo
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Subsection
Stile architetturale del server
\end_layout

\begin_layout Standard
Lo stile architetturale che verrà seguito per il server è il Multitier nella
 forma Three Tier.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/Multitier.pdf
	width 90text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Rappresentazione Three Tier
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Descrizione:
\series default
 tale stile architetturale permette una disgiunzione fra i vari gruppi di
 entità che cooperano per l'erogazione del servizio.
 Un primo livello si occuperà della comunicazione con il client, un secondo
 livello invece si occuperà di effettuare le operazioni logiche e di comunicare
 con il terzo strato che si occuperà di modificare la base di dati
\end_layout

\begin_deeper
\begin_layout Itemize
strato transfer: offrirà un'interfaccia di comunicazione con il client e
 i livelli sottostanti del server e si occuperà di svolgere le funzionalità
 di comunicazione
\end_layout

\begin_layout Itemize
strato manager: gestirà la comunicazione tra gli strati transfer e data
 e la visualizzazione e la modifica delle informazioni presenti nello strato
 data
\end_layout

\begin_layout Itemize
strato data: sarà un contenitore di informazioni riguardanti gli utenti
 e di messaggi registrati e collegamenti
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Motivazione:
\series default
 il beneficio principale di questo stile è la possibilità di aggiornare/cambiare
 un livello senza modificare i livelli adiacenti.
 La forte comunicazione rigidamente strutturata tra gli strati, che favorisce
 il disaccoppiamento, rende tale architettura un ottimo modello per applicazioni
 client-server, poiché ogni livello non esiste come unità logica a se stante,
 ma si adegua allo specifico ambiente di rete in cui esegue
\end_layout

\end_body
\end_document
