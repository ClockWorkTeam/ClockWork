#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
\start_of_appendix
Backbone.js
\begin_inset CommandInset label
LatexCommand label
name "sec:Backbone.js"

\end_inset


\end_layout

\begin_layout Standard
Backbone.js nasce come libreria di sviluppo per DocumentCloud, un servizio
 di condivisione e analisi di documenti, e viene rilasciata come progetto
 standalone verso la fine del 2010.
\end_layout

\begin_layout Standard
Gli obiettivi principali dello sviluppatore sono di realizzare una libreria
 minimale in grado di fornire degli strumenti di base per organizzare le
 proprie applicazioni e di poterla usare sia in ambiente browser che server
 (principalmente con Node.js).
\end_layout

\begin_layout Standard
Backbone si focalizza nel fornire metodi utili per manipolare e visualizzare
 i dati presenti nell'applicazione.
\end_layout

\begin_layout Standard
Per la sua architettura, Backbone.js rientra nella categoria delle librerie
 MV*, in quanto implementa Model e View, ma non ha un componente Controller
 tradizionale, delegandone i compiti alle View ed al Router.
 Questo approccio è abbastanza diffuso in ambito JavaScript, a causa della
 diversa e più complessa gestione dell’interazione utente e dello stato
 dell’applicazione.
\end_layout

\begin_layout Standard
I principali componenti di Backbone.js sono:
\end_layout

\begin_layout Itemize
Backbone.Model
\end_layout

\begin_layout Itemize
Backbone.Collection
\end_layout

\begin_layout Itemize
Backbone.View
\end_layout

\begin_layout Itemize
Backbone.Router
\end_layout

\begin_layout Itemize
Backbone.Events
\end_layout

\begin_layout Subsubsection
Dipendenze
\end_layout

\begin_layout Standard
Per il suo funzionamento Backbone.js si appoggia ad alcune librerie esterne:
\end_layout

\begin_layout Itemize
Underscore.js ( ≥ 1.4.3): è una libreria di utility per JavaScript che aggiunge
 supporto funzionale per collezioni, array e funzioni.
 Inoltre rende disponibile un sistema di templating HTML che è possibile
 usare congiuntamente alle View di Backbone.js
\end_layout

\begin_layout Itemize
jQuery ( ≥ 1.7.0): è una libreria che facilita la manipolazione del DOM in
 JavaScript
\end_layout

\begin_layout Subsection
Backbone.Model
\end_layout

\begin_layout Standard
Il Model di Backbone.js rappresenta un oggetto discreto contenente una serie
 di dati sotto forma di attributi, si tratta quindi di un singolo record.
 I Model vengono aggregati dalle Collection.
 É inoltre possibile definire funzioni personalizzate per eseguire operazioni
 sui dati.
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var ExampleModel = Backbone.Model.extend({ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //attributi di default del model 
\end_layout

\begin_layout Plain Layout

  defaults: { 
\end_layout

\begin_layout Plain Layout

    content: "description", //attributo di tipo stringa
\end_layout

\begin_layout Plain Layout

    read: false, //attributo di tipo booleano
\end_layout

\begin_layout Plain Layout

    number: 12 //attributo numerico
\end_layout

\begin_layout Plain Layout

  }, 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //funzione di inizializzazione
\end_layout

\begin_layout Plain Layout

  initialize: function() { 
\end_layout

\begin_layout Plain Layout

    if (!this.get("content")) { 
\end_layout

\begin_layout Plain Layout

      //assicuriamoci che il todo abbia un contenuto
\end_layout

\begin_layout Plain Layout

      this.set({"content": this.defaults.content}); 
\end_layout

\begin_layout Plain Layout

    } 
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //funzioni definite dall'utente
\end_layout

\begin_layout Plain Layout

  toggle: function() { 
\end_layout

\begin_layout Plain Layout

    var currentRead = this.get("read"); 
\end_layout

\begin_layout Plain Layout

    this.set({read: !currentRead});
\end_layout

\begin_layout Plain Layout

  }, 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  clear: function() { 
\end_layout

\begin_layout Plain Layout

    //distrugge il model 
\end_layout

\begin_layout Plain Layout

    this.destroy(); 
\end_layout

\begin_layout Plain Layout

  } 
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il metodo extend() permette di aggiungere proprietà e metodi personalizzati
 all'istanza del modello ed eventualmente di aggiungere direttamente al
 costruttore proprietà relative alla classe inoltre imposta in modo corretto
 la catena di prototipizzazione in modo da poter estendere ulteriormente
 classi derivate.
\end_layout

\begin_layout Standard
L'attributo defaults è un oggetto con la lista degli attributi predefiniti
 con i rispettivi valori.
\end_layout

\begin_layout Standard
La funzione initialize() viene invocata quando viene creato il model e può
 essere usata al posto di ridefinire il costruttore.
\end_layout

\begin_layout Subsection
Backbone.Collection
\end_layout

\begin_layout Standard
Una collection è un oggetto contenente una raccolta di modelli dello stesso
 tipo, attraverso il quale è possibile, ordinare, filtrare e manipolare
 i modelli contenuti.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var ExampleCollection = Backbone.Collection.extend({ 
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  //model di riferimento   
\end_layout

\begin_layout Plain Layout

  model: ExampleModel
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Come per i Model il metodo extend() permette di aggiungere proprietà e metodi
 personalizzati alla Collection ed imposta in modo corretto la catena di
 prototipizzazione.
\end_layout

\begin_layout Standard
L'attributo model contiente il modello di riferimenti i cui oggetti sono
 aggregati dalla Collection.
\end_layout

\begin_layout Subsection
Backbone.View
\end_layout

\begin_layout Standard
Le View in Backbone.js non contengono markup HTML, bensì fungono da tramite
 fra l’interfaccia ed i modelli, definendone la logica di interazione.
 La parte di templating vero e proprio è demandata a librerie esterne.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var ExampleView = Backbone.View.extend({
\end_layout

\begin_layout Plain Layout

  tagName: "li",
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  className: "document-row",
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  template: _.template(exampleTemplate),
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  events: {
\end_layout

\begin_layout Plain Layout

    "click .icon":          "open",
\end_layout

\begin_layout Plain Layout

    "click .button.edit":   "openEditDialog",
\end_layout

\begin_layout Plain Layout

    "click .button.delete": "destroy"
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  initialize: function() {
\end_layout

\begin_layout Plain Layout

    this.listenTo(this.model, "change", this.render);
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  render: function() {
\end_layout

\begin_layout Plain Layout

    this.$el.html(this.template(this.model.attributes));
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  open: function() {},
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  openEditDialog: function() {},
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  destroy: function() {}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Gli attributi tagName e className servono a definire la proprietà el della
 vista, che identifica l'elemento del DOM a cui è legata e in cui verrà
 visualizzata.
 Altri attributi che possono essere usati per definirla sono id e attributes
 o, in alternativa, la si può specificare in modo esplicito.
\end_layout

\begin_layout Standard
L'attributo template contiene il frammento HTML riguardante il layout vero
 e proprio della vista.
 In questo esempio si utilizza il sistema di templating di Underscore.js
 attraverso la sua funzione _.template().
\end_layout

\begin_layout Standard
Nell'array events vengono associati gli eventi generati dal DOM alle funzioni
 atte a gestirli.
\end_layout

\begin_layout Standard
La funzione initialize() viene invocata alla creazione della vista.
\end_layout

\begin_layout Standard
Nella sua implementazione di default la funzione render() non compie nessuna
 operazione.
 Questa funzione va ridefinita al fine di visualizzare correttamente la
 vista nella pagina web, includendo eventualmente i dati presi dai modelli.
\end_layout

\begin_layout Subsection
Backbone.Router
\begin_inset Foot
status open

\begin_layout Plain Layout
Dato che, da capitolato, ci è chiesto di creare un'applicazione su una singola
 pagina web i Router di Backbone.js non verranno utilizzati in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
PROGETTO
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il Router di Backbone.js ci permette di ottenere un’applicazione che risiede
 completamente in una singola pagina, ma che tuttavia da la possibilità
 di navigare fra le proprie viste come si farebbe con un’applicazione web
 tradizionale.
\end_layout

\begin_layout Standard
Oltre al vantaggio di eliminare i tempi di attesa durante il caricamento
 della pagina e di dare più scorrevolezza all’interazione, un’applicazione
 di questo tipo simula anche il cambiamento di pagina aggiornando l’URL
 della pagina nella barra degli indirizzi.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var Workspace = Backbone.Router.extend({
\end_layout

\begin_layout Plain Layout

  routes: {
\end_layout

\begin_layout Plain Layout

    "help":                 "help",    // #help
\end_layout

\begin_layout Plain Layout

    "search/:query":        "search",  // #search/kiwis
\end_layout

\begin_layout Plain Layout

    "search/:query/p:page": "search"   // #search/kiwis/p7
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //funzioni di gestione delle Routes
\end_layout

\begin_layout Plain Layout

  help: function() {
\end_layout

\begin_layout Plain Layout

    ...
   
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  search: function(query, page) {
\end_layout

\begin_layout Plain Layout

    ...
   
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'array routes gli URL con parametri a funzioni, in modo simile all'array
 events delle View
\end_layout

\begin_layout Subsection
Backbone.Events
\end_layout

\begin_layout Standard
Backbone mette a disposizione un sistema che consente di legare un oggetto
 ad uno o più eventi, in modo da poter lanciare delle funzioni quando questi
 si verificano.
 Oltre a poter gestire eventi del DOM possiamo legare eventi personalizzati
 che avvengono su oggetti.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var Test = Backbone.View.extend({     
\end_layout

\begin_layout Plain Layout

  events: {         
\end_layout

\begin_layout Plain Layout

    'click button#start' : 'start',         
\end_layout

\begin_layout Plain Layout

    'click .field' : 'score',         
\end_layout

\begin_layout Plain Layout

    'click button#reset' : 'reset'     
\end_layout

\begin_layout Plain Layout

  }, 
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  //funzioni di gestione degli eventi   
\end_layout

\begin_layout Plain Layout

  start: function() { ...
 },     
\end_layout

\begin_layout Plain Layout

  score: function(event) { ...
 },     
\end_layout

\begin_layout Plain Layout

  reset: function() { ...
 }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//dichiaro un oggetto
\end_layout

\begin_layout Plain Layout

var object = {};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//estendo Backbone.Events
\end_layout

\begin_layout Plain Layout

_.extend(object, Backbone.Events);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//specifico cosa fare se un evento avviene
\end_layout

\begin_layout Plain Layout

object.on("alert", function(msg) {
\end_layout

\begin_layout Plain Layout

  alert("Triggered " + msg);
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//lancio l'evento
\end_layout

\begin_layout Plain Layout

object.trigger("alert", "an event");
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Underscore.js Templates
\end_layout

\begin_layout Standard
Underscore.js implementa un sistema di templating che permette di includere
 comandi e variabili all'interno di frammenti HTML in modo da generare pagine
 HTML che si adattino al contesto.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var compiled = _.template("hello: <%= name %>");
\end_layout

\begin_layout Plain Layout

compiled({name : 'moe'});
\end_layout

\begin_layout Plain Layout

=> "hello: moe"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

var list = "<% _.each(people, function(name) {
\end_layout

\begin_layout Plain Layout

  %> <li><%= name %></li> <%
\end_layout

\begin_layout Plain Layout

}); %>";
\end_layout

\begin_layout Plain Layout

_.template(list, {people : ['moe', 'curly', 'larry']});
\end_layout

\begin_layout Plain Layout

=> "<li>moe</li><li>curly</li><li>larry</li>"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

var template = _.template("<b><%- value %></b>");
\end_layout

\begin_layout Plain Layout

template({value : '<script>'});
\end_layout

\begin_layout Plain Layout

=> "<b>&lt;script&gt;</b>"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I simboli <% e %> racchiudono le istruzioni non HTML.
\end_layout

\begin_layout Standard
<%= name %> verrà sostituito dal valore della variabile name.
\end_layout

\end_body
\end_document
