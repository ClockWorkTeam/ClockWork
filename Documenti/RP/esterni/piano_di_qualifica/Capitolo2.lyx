#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Visione generale delle strategie di verifica
\end_layout

\begin_layout Subsection
Organizzazione e responsabilità
\end_layout

\begin_layout Standard
Al fine di sviluppare un prodotto di qualità il 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
NOMEGRUPPO}
\end_layout

\end_inset

 si impegna ad applicare il processo di verifica e validazione in ogni fase
 del progetto, sia sul prodotto software che sui documenti del progetto.
 All’interno del gruppo i ruoli destinati all’attuazione del processo di
 verifica e di validazione sono i Verificatori e il Responsabile:
\end_layout

\begin_layout Itemize

\series bold
Verificatore:
\series default
 ha il compito di applicare le tecniche di verifica descritte successivamente
 per ogni fase del ciclo di vita.
 Il processo di verifica e validazione inizia sui documenti, il Verificatore
 deve accertare che la documentazione prodotta sia corretta, a livello grammatic
ale e sintattico e che rispetti le norme descritte nelle Norme di Progetto.
 Il controllo ortografico, sarà automatizzato utilizzando la strumentazione
 descritta nel capitolo Ambiente di verifica e validazione delle Norme di
 Progetto.
 Il controllo dei termini nel glossario, inseriti nei documenti, avverrà
 tramite un'attenta lettura dei documenti.
 Se durante la verifica saranno state rilevate irregolarità, queste verranno
 segnalate tramite un apposito 
\bar under
ticket
\bar default
 dal verificatore e corrette dal redattore.
 Il processo di verifica si concluderà quindi con la validazione del documento
 da parte del verificatore e l'approvazione da parte del responsabile per
 la presentazione al 
\bar under
committente
\end_layout

\begin_layout Itemize

\series bold
Responsabile:
\series default
 ha il dovere di coordinare e gestire l’attuazione del processo di validazione
 e verifica.
 È il solo a poter approvare o meno la correttezza di un documento.
 Ha l’obbligo di accertarsi che i doveri assegnati ai componenti del gruppo
 siano eseguiti secondo i criteri dettati nel Piano di Progetto e che non
 ci siano conflitti di interessi fra i Verificatori e l’oggetto di verifica.
 Deve tenere traccia di eventuali anomalie e di conseguenza poter intervenire
 tempestivamente.
 Assieme all’Amministratore è responsabile della emanazione dei ticket e
 della loro assegnazione.
 Deve inoltre essere la figura di riferimento del gruppo e quindi deve saper
 accogliere e risolvere eventuali problematiche riscontrate fra i vari component
i del gruppo.
 Deve inoltre tener traccia dei problemi e delle relative soluzioni adottate
\end_layout

\begin_layout Standard
Al fine di garantire un costante riscontro dell’evoluzione del lavoro, ogni
 singolo membro del gruppo è tenuto a cronometrare le proprie ore di lavoro
 dedicate al progetto, per ogni ruolo che sta adempiendo, e renderlo noto
 al Responsabile, in modo tale che possa effettuare un controllo sulle ore
 di lavoro preventivate e di conseguenza agire per la nuova pianificazione
 della fase successiva.
 Inoltre tutti i membri del gruppo hanno l’obbligo di controllare quotidianament
e l’emanazione dei ticket.
 I documenti prodotti devono essere forniti di un diario delle modifiche,
 questo consentirà di agevolare la verifica sugli stessi.
 La conformità alle norme definite nel documento Norme di Progetto consentirà
 di ridurre gli errori dovuti a incomprensioni che possono nascere durante
 lo sviluppo del progetto.
\end_layout

\begin_layout Subsection
Pianificazione Strategica e Temporale
\begin_inset CommandInset label
LatexCommand label
name "sub:Pianificazione-Strategica-e-Temporale"

\end_inset


\end_layout

\begin_layout Standard
Una verifica continua sui processi e sui prodotti, attuata in modo preventivo
 e non retrospettivo, può garantire un alto livello di qualità al fine di
 rispettare le aspettative del cliente e il pieno soddisfacimento dei requisiti
 richiesti dal Capitolato d’Appalto, minimizzando i rischi di fallimento
 prematuro del progetto e riducendo i costi di correzione degli eventuali
 errori.
 
\end_layout

\begin_layout Standard
\paragraph_spacing single
\noindent
Il Responsabile di Progetto si impegna a definire le attività di verifica
 finalizzate al collaudo di sistema, e le relative scadenze, assegnando
 tali attività ai verificatori in modo che ciascuno dei singoli elementi
 software, documentali o di altro genere, vengano verificati durante i processi
 realizzativi ed entro le scadenze previste.
\end_layout

\begin_layout Standard
I processi di revisione adottati saranno di due tipi:
\end_layout

\begin_layout Itemize
Revisioni formali condotte dal cliente e con effetto sanzionatorio (corrisponden
ti all’Audit Process di ISO/IEC 12207)
\end_layout

\begin_deeper
\begin_layout Itemize
Revisione dei Requisiti (RR): 2013/01/09
\end_layout

\begin_layout Itemize
Revisione di Accettazione (RA): da destinarsi, ipotizzata al 2013/03/21
\end_layout

\end_deeper
\begin_layout Itemize
Revisioni informali di revisione interna (di progresso) con il coinvolgimento
 del cliente (corrispondenti al Joint Review Process di ISO/IEC 12207)
\end_layout

\begin_deeper
\begin_layout Itemize
Revisione di Progettazione (RP): 2013/02/05
\end_layout

\begin_layout Itemize
Revisione di Qualifica (RQ): 2013/03/05
\end_layout

\end_deeper
\begin_layout Standard
Come indicato nel Piano di Progetto il modello di ciclo di vita adottato
 per lo sviluppo del software è di tipo incrementale.
 In base a questo modello di ciclo di vita vengono definite le strategie
 di verifica per ogni fase del ciclo di vita.
\end_layout

\begin_layout Subsubsection
Fase di Analisi
\end_layout

\begin_layout Standard
In questa fase i Verificatori hanno il compito di controllare che l’Analisi
 dei Requisiti soddisfi le norme definite nel documento Norme di Progetto
 e che rispetti le seguenti caratteristiche:
\end_layout

\begin_layout Itemize

\series bold
Priva di ambiguità:
\series default
 il documento non è ambiguo se e solo se ogni requisito individuato ha solo
 una interpretazione.
 Il Verificatore per controllare questa qualità dovrà procedere alla lettura
 del singolo requisito, non è un processo automatizzabile
\end_layout

\begin_layout Itemize

\series bold
Corretta:
\series default
 il documento è corretto se e solo se ogni requisito individuato è un requisito
 che il software deve avere.
 Il Verificatore per controllare questa qualità deve avere una buona conoscenza
 dei documenti forniti dal Proponente, inoltre questo controllo sarà agevolato
 da una corretto tracciamento dei requisiti
\end_layout

\begin_layout Itemize

\series bold
Completa:
\series default
 il documento è completo se e solo se include tutti i requisiti fondamentali,
 definisce come deve reagire il software agli input, ed è completo di riferiment
i e etichette per tutte le figure, tabelle, diagrammi e definizioni.
 Il Verificatore dovrà quindi procedere a una lettura attenta del documento
\end_layout

\begin_layout Itemize

\series bold
Verificabile:
\series default
 il documento è verificabile se e solo se per ogni suo requisito è definito
 il modo con cui si possa verificare che il software soddisfa tale requisito.
 Il Verificatore in primo luogo deve controllare che ogni requisito individuato
 sia tracciabile e atomico, in quanto requisiti non atomici sono difficilmente
 verificabili.
 Questa attività non è automatizzabile, pertanto si richiede una attenta
 lettura
\end_layout

\begin_layout Itemize

\series bold
Consistente:
\series default
 il documento è consistente se non genera contraddizioni al suo interno
 e con documenti di più alto livello.
 Si richiede una attenta lettura da parte del Verificatore dell’intero documento
\end_layout

\begin_layout Itemize

\series bold
Modificabile:
\series default
 il documento è modificabile se la sua struttura consenta di effettuare
 delle modifiche facilmente e in modo consistente.
 La conformità delle norme stabilite nelle Norme di Progetto facilità il
 raggiungimento di questa qualità
\end_layout

\begin_layout Itemize

\series bold
Tracciabile:
\series default
 il documento è tracciabile se ogni requisito ha una fonte chiara e se il
 documento definisce il modo con cui riferirsi al requisito.
 Il Verificatore dovrà controllare che nella tabella riassuntiva dei requisiti
 per ogni requisito sia stata definita la sua provenienza
\end_layout

\begin_layout Itemize

\series bold
Ordinata per rilevanza:
\series default
 il documento soddisfa questa qualità se per ogni requisito è definito il
 suo livello di importanza.
 Il Verificatore dovrà controllare nella tabella riassuntiva dei requisiti
 che i requisiti siano ordinati secondo le norme descritte nelle Norme di
 Progetto
\end_layout

\begin_layout Standard
Per una descrizione più dettagliata di queste qualità si rimanda a IEEE
 830-1998.
 Per la verifica del documento principalmente verrà usata la tecnica 
\bar under
walkthrough
\bar default
, inoltre se è possibile verrà utilizzata la tecnica 
\bar under
inspection
\bar default
 per individuare errori, o non conformità, già riscontrati dal Committente
 nelle versioni precedenti del documento.
 Le tipologie di tecniche sono descritte nella sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Analisi-statica"

\end_inset

.
 I Verificatori controlleranno che i diagrammi 
\bar under
UML
\bar default
 dei casi d'uso siano tracciabili, atomici, corretti ortograficamente e
 sintatticamente, in quanto su questi non è possibile fare controllo automatico.
 Ci aspettiamo che una buona progettazione e verifica in questa fase individui
 i requisiti necessari al raggiungimento delle seguenti qualità:
\end_layout

\begin_layout Itemize

\series bold
Sufficienza:
\series default
 i portatori di interesse si aspettano che il software sia capace di soddisfare
 tutti i requisiti
\end_layout

\begin_layout Itemize

\series bold
Comprensibilità:
\series default
 il software deve essere facilmente comprensibile ai portatori di interesse.
 Questa qualità sarà raggiunta se in fase di analisi saranno individuati
 completamente i requisiti, in particolare anche quelli mirati alla usabilità
\end_layout

\begin_layout Subsubsection
Fase di Progettazione
\end_layout

\begin_layout Standard
In questa fase i Verificatori dovranno accertare che ogni requisito individuato
 nell’Analisi dei Requisiti venga correttamente tradotto nell’architettura
 del sistema software, descritta nella Specifica Tecnica.
 La verifica in questa fase deve accertare che la progettazione effettuata
 rispetti i principi di:
\end_layout

\begin_layout Itemize

\series bold
Disaccoppiamento:
\series default
 le classi definite devono essere il più possibile indipendenti
\end_layout

\begin_layout Itemize

\series bold
Packaging:
\series default
 le classi devono essere raggruppate per criterio logico
\end_layout

\begin_layout Itemize

\series bold
Coesione: 
\series default
le classi devono contenere solo il necessario per raggiungere gli obiettivi
\end_layout

\begin_layout Standard
Tale attività sarà agevolata da un corretto tracciamento dei requisiti.
 Una buona progettazione e verifica in questa fase porterà al raggiungimento
 delle seguenti qualità:
\end_layout

\begin_layout Itemize

\series bold
Modularità:
\series default
 poiché è richiesto che il software sia migliorabile deve essere diviso
 in parti chiare e distinte.
 I Verificatori dovranno quindi verificare il livello di disaccoppiamento
 e di incapsulamento delle classi
\end_layout

\begin_layout Itemize

\series bold
Semplicità:
\series default
 l’architettura del software deve contenere solo il necessario, niente di
 superfluo
\end_layout

\begin_layout Standard
La verifica in questa fase non è automatizzabile, si richiede ai Verificatori
 di porre la massima attenzione in questa fase, in quanto è di fondamentale
 importanza per il successo della fase successiva.
\end_layout

\begin_layout Subsubsection
Fase di Codifica
\end_layout

\begin_layout Standard
In questa fase il Verificatore dovrà esaminare le unità di codice prodotte
 per accertarsi che rispettino le norme definite nelle Norme di Progetto,
 le norme di codifica definite nella sezione Metriche delle Norme di Progetto,
 e che non contenga errori di programmazione.
 Deve controllare che ogni requisito sia tradotto in qualche unità di codice
 e che non ci sia codice non associato ad alcun requisito.
 Questo sarà possibile tramite un buon tracciamento dei requisiti.
\end_layout

\begin_layout Standard
\noindent
Il modello di sviluppo adottato è di tipo incremmentale, come descritto
 nel documento Piano di Progetto.
 Ogni incremento ha lo scopo di sviluppare unità software che verranno successiv
amente integrate le une con le altre.
 La priorità di sviluppo delle varie unità sarà determinata da una visione
 “bottom-up”, ovvero verranno prima prodotte le unità di codice con un livello
 minore di dipendenza dalle altre, al fine di ridurre la produzione di 
\bar under
driver
\bar default
 per l’attività di test.
\end_layout

\begin_layout Standard
\noindent
Prima di procedere all’integrazione, ogni unità dovrà compilare correttamente
 senza provocare warning, in seguito deve essere sottoposta ad analisi statica,
 nelle forme descritte in “Tecniche” (XX) delle Norme di Progetto, mediante
 i software di analisi statica descritti in “Strumenti” (XX) alla voce “Analisi
 statica sul codice”.
 Sulle componenti software dove è richiesta l’esecuzione di una prova, dopo
 la compilazione e l’analisi statica, si effettueranno test funzionali (
\bar under
black-box
\bar default
), e in seguito se richiesto test strutturali (
\bar under
white-box
\bar default
), nelle forme descritte in “Tecniche” (XX), questa attività sarà supportata
 dalla strumentazione descritta in “Strumenti” (3.4), alla voce “Analisi
 dinamica sul codice”.
 Una volta che una unità di codice compila senza provocare warning, è pronta
 per essere integrata nel sistema.
 Nel caso si riscontrino malfunzionamenti dopo una integrazione sarà necessario
 individuare tramite l’uso del compilatore l’unità responsabile del malfunzionam
ento, ripristinare l’ultima versione stabile del sistema e avvisare immediatamen
te il Programmatore che ha introdotto il problema, avvisando anche il Responsabi
le.
 Nel caso che dopo l’integrazione di una nuova unità il compilatore non
 generi errori si effettueranno test di integrazione descritti in “Descrizione
 dei test” (XX) alla voce “Test di integrazione”.
\end_layout

\begin_layout Standard
\noindent
Ci aspettiamo che dall’attuazione di una buona codifica, associata a un
 buon metodo di verifica il software raggiunga le seguenti qualità:
\end_layout

\begin_layout Itemize

\series bold
Robustezza:
\series default
 poiché il software è destinato a persone con limitate conoscenze informatiche,
 deve essere capace di sopportare ingressi errati.
 I Verificatori, mediante l’uso dei test, dovranno verificare che il software
 sia stabile anche con input errati
\end_layout

\begin_layout Itemize

\series bold
Efficienza:
\series default
 per dare un riscontro veloce con l’utente, per migliorarne l’usabilità,
 il software deve essere efficiente in termini di tempo.
 I Verificatori valuteranno questa qualità tramite l’uso di test automatizzati
\end_layout

\begin_layout Subsubsection
Fase di Collaudo
\end_layout

\begin_layout Standard
In questa fase il Verificatore effettuerà dei test di accettazione sui requisiti
 definiti nella sezione “Descrizione dei test” (XX), e verificherà che non
 si presentino malfunzionamenti durante l’utilizzo del prodotto.
 La strategia di verifica adottata è descritta nella sezione “Tecniche”
 (3.5).
 Verrà testato il corretto funzionamento del programma e verrà testata la
 facilità da parte dell’utente di compiere le operazioni per cui il software
 si è posto il compito.
 Tramite i loro giudizi valuteremo l’usabilità del nostro prodotto.
 Per il soddisfacimento dei requisiti obbligatori di qualità definiti nella
 Analisi dei Requisiti si adotteranno tecniche di walkthrough e inspection.
 Per il soddisfacimento dei vincoli sarà effettuata una prova ad hoc.
 Al termine della fase di 
\bar under
beta-test
\bar default
 si passerà alla Revisione di Accettazione.
 La buona riuscita di questa fase porterà al raggiungimento della seguente
 qualità:
\end_layout

\begin_layout Itemize

\series bold
Affidabilità:
\series default
 i portatori di interesse si aspettano che il software funzioni correttamente.
 I Verificatori valuteranno questa caratteristica eseguendo personalmente
 il codice
\end_layout

\begin_layout Subsection
Risorse necessarie e risorse disponibili
\end_layout

\begin_layout Standard
Tali risorse serviranno per la realizzazione del progetto, esse sono distinte
 in risorse umane e risorse tecnologiche.
 Le risorse umane sono costituite dalle figure di Responsabile, Responsabile
 standard, Amministratore, Analista, Progettista, Verificatore, Programmatore.
 Per una descrizione di questi ruoli si rimanda al documento Norme di Progetto.
 Le risorse tecnologiche che serviranno per lo sviluppo del progetto sono
 i Personal Computer dei singoli componenti del gruppo, dotati della strumentazi
one software descritta nelle Norme di Progetto.
 
\end_layout

\begin_layout Subsection
Strumenti
\end_layout

\begin_layout Standard
Strumenti software per facilitare e automatizzare l’attività di verifica
 e validazione, come strumenti per l’analisi statica e dinamica, strumenti
 di test, strumenti per il tracciamento dei requisiti, strumenti per la
 misurazione della qualità dei processi.
 Tali strumenti sono descritti nelle Norme di Progetto.
\end_layout

\begin_layout Subsection
Tecniche
\end_layout

\begin_layout Standard
I Verificatori dovranno adottare le seguenti tecniche di analisi dove è
 richiesto:
\end_layout

\begin_layout Subsubsection
Analisi statica
\begin_inset CommandInset label
LatexCommand label
name "sub:Analisi-statica"

\end_inset


\end_layout

\begin_layout Standard
Analisi che non richiede l’esecuzione del codice e si può applicare ad ogni
 prodotto di processo, non solo al codice.
 Per la verifica di prodotti semplici si può ricorrere ai metodi di lettura
 (desk check), distinti in inspection, ovvero una lettura mirata all’individuazi
one di un errore presupposto e walkthrough, ovvero una lettura a largo spettro
 per rilevamento di errori non presupposti.
 Per effettuare analisi statica sulle unità di codice si ricorre a metodi
 formali, descritti nella sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Analisi-statica"

\end_inset

, che dimostrano una certa proprietà del prodotto.
 Nelle prime fasi del progetto i Verificatori adotteranno principalmente
 la tecnica walkthrough.
 Gli errori rilevati più frequentemente forniranno al gruppo una maggiore
 esperienza, che consentirà ai Verificatori di utilizzare una tecnica di
 inspection per l’individuazione di tali errori.
 Inoltre ogni correzione o suggerimento fornito dal Committente fornirà
 anch’essa maggiore esperienza e saranno utilizzate per procedere con la
 tecnica inspection.
\end_layout

\begin_layout Subsubsection
Analisi dinamica
\end_layout

\begin_layout Standard
Analisi che richiede l’esecuzione del codice, che può essere un’unità, un
 aggregato o il sistema completo.
 Utilizzata sia nelle fasi di verifica che di validazione.
 Le esecuzioni che applicano analisi dinamica sono denominate test o prove.
 I tipi di test che il 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
NOMEGRUPPO
\end_layout

\end_inset

 intende seguire sono riportati nel documento 
\family typewriter
Norme_di_Progetto_v2.0.pdf
\family default
, sez.
 Test.
\end_layout

\begin_layout Subsection
Metodi
\end_layout

\begin_layout Standard
Poter garantire un software di qualità, capace quindi di esibire le proprietà
 richieste, è un obiettivo di fondamentale importanza, reso possibile allocando
 risorse per effettuare controllo sul prodotto.
 Tuttavia, essendo le risorse limitate e che comportano dei costi, è altresì
 importante saper gestire tali risorse in modo da mantenere un buon rapporto
 fra qualità del prodotto e risorse necessarie.
 Pertanto, in base alla complessità del prodotto che ci è stato richiesto
 di sviluppare, e in base alle caratteristiche che esso deve avere, il nostro
 gruppo ha deciso di adottare le seguenti tipologie di analisi statica:
\end_layout

\begin_layout Itemize

\series bold
Analisi di flusso di controllo
\end_layout

\begin_layout Itemize

\series bold
Analisi di flusso dei dati
\end_layout

\begin_layout Itemize

\series bold
Analisi di flusso di informazione
\end_layout

\begin_layout Itemize

\series bold
Verifica formale del codice
\end_layout

\begin_layout Standard
Tali metodologie vengono descritte nal documento 
\family typewriter
Norme_di_Progetto_v2.0.pdf
\family default
, sez.
 Analisi statica.
\end_layout

\begin_layout Subsection
Misure e metriche
\end_layout

\begin_layout Standard
Le misure rilevate dal processo di verifica, che permettono di ottenere
 informazioni quantitative relative ai prodotti di ogni processo produttivo
 (sia esso progettuale o di codifica), devono essere basate su metriche
 stabilite a priori quando è possibile ritenere di avere sufficienti conoscenze
 dell'argomento trattato.
 Qualora ci fossero metriche, riguardanti determinate misure, ancora incerte
 e approssimative, si cercherà di provvedere a stabilirle precisamente durante
 il corso della progettazione e realizzazione del prodotto, attraverso l'analisi
 di ciò che sarà stato realizzato fino a quel momento e grazie anche all'apprend
imento graduale del gruppo.
 Le misure e le metriche suddette sono riportate nel documento 
\family typewriter
Norme_di_Progetto_v2.0.pdf
\family default
, sez.
 Metriche.
\end_layout

\end_body
\end_document
