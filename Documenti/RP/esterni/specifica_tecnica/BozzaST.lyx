#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Stesura il 2012/01/24
\end_layout

\begin_layout Standard
L'applicativo è diviso in 2 sistemi, ovvero il lato Client e il lato Server;
 l'indice di accoppiamento tra questi 2 sottosistemi sarà tenuto al minimo
 necessario.
\end_layout

\begin_layout Standard
Il sistema nel suo complesso è progettato secondo un design pattern di tipo
 MVP, mentre per i 2 sottosistemi utilizziamo design pattern di tipo MVP
 per il front-end e Three-Tier per il back-end.
\end_layout

\begin_layout Standard
Client si occuperà di fornire all'utente un'interfaccia attraverso la quale
 utilizzare il prodotto MyTalk ed è composto dalle sottosezioni:
\end_layout

\begin_layout Standard
Autenticazione
\end_layout

\begin_layout Standard
Gestione Dati
\end_layout

\begin_layout Standard
Tutorial
\end_layout

\begin_layout Standard
Visualizzazione lista utenti
\end_layout

\begin_layout Standard
Gestione Chiamata in arrivo
\end_layout

\begin_layout Standard
Chiamata
\end_layout

\begin_layout Standard
Messaggio differito
\end_layout

\begin_layout Standard
Chat
\end_layout

\begin_layout Standard
Invio File
\end_layout

\begin_layout Standard
Back-End composto dalle sottosezioni:
\end_layout

\begin_layout Standard
Autenticazione
\end_layout

\begin_layout Standard
gestione dati utenti
\end_layout

\begin_layout Standard
Inizializzazione Chiamata
\end_layout

\begin_layout Standard
Salvataggio messaggio differito
\end_layout

\begin_layout Standard
Server dovrà inizializzare la connessione tra gli utenti e salvare eventuali
 messaggi differiti; contiene inoltre una base di dati con gli utenti registrati
 al servizio, e deve eseguire le operazioni di / controllo dell'autenticazione
 / (frase brutta) 
\end_layout

\begin_layout Standard
Architettura Client
\end_layout

\begin_layout Standard
Il Client costituisce la View del sistema e le comunicazioni con il back-end,
 ovvero Server, ottenendo quindi un Presenter scisso tra i 2 sottosistemi.
\end_layout

\begin_layout Standard
L'architettura client è realizzata con l'utilizzo del framework Backbone.js;
 è la parte più ricca del prodotto, poichè si è utilizzata un'architettura
 di tipo Fat-Client., ovvero un'architettura volta a caricare la maggior
 parte del peso computazionale sul client lasciando al lato server compiti
 meno onerosi.
\end_layout

\begin_layout Standard
Architettura Server
\end_layout

\begin_layout Standard
Il Server completa il Presenter dell'architettura di sistema e contiene
 la base di dati che costituisce il Model.
 
\end_layout

\begin_layout Standard
Seguendo il design pattern three-tier è suddiviso in 3 strati o layers,
 Data, Logic e Presenter.
\end_layout

\begin_layout Standard
Il Data layer contiene le informazioni riguardanti gli utenti registrati,
 ed è accessibile solo tramite lo strato Logic.
\end_layout

\begin_layout Standard
Lo strato Presenter comunica con la parte Presenter del sottosistema Client
 per tradurre i segnali mandati dal Client in modo che siano utilizzabili
 dal Logic Layer.
\end_layout

\end_body
\end_document
