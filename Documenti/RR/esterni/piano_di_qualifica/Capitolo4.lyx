#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Strumenti, Tecniche e Metodi
\end_layout

\begin_layout Subsection
Strumenti
\end_layout

\begin_layout Standard
Il gruppo potrà avvalersi dei seguenti strumenti per effettuare i processi
 di verifica:
\end_layout

\begin_layout Itemize

\series bold
Aspell (≥ 0.50.3):
\series default
 strumento per la correzione grammaticale dei documenti redatti.
 L’utilizzo di Aspell avverrà tramite apposito plugin per LyX (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://aspell.net/
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize

\series bold
Chromedriver (≥ 21.0.1180.4):
\series default
 plugin per Chrome che registra ed esegue test direttamente sul browser,
 permettendo la verifica dei casi d’uso stabiliti, e quindi i relativi requisiti
 (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://code.google.com/p/cromedriver
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize

\series bold
Eclipse (≥ 3.7.1):
\series default
 
\bar under
IDE
\bar default
 multi-linguaggio e multipiattaforma che fornisce, nella versione base,
 alcune funzionalità utili di debugging, come l’esecuzione del codice 
\bar under
step-by-step
\bar default
, l’impostazione di 
\bar under
breakpoint
\bar default
, visualizzazione dei valori di variabili e strutture dati durante l’esecuzione,
 sospensione e riavvio di 
\bar under
thread
\bar default
 in esecuzione, ecc.
 (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.eclipse.org/
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize

\series bold
FindBugs (≥ 2.0.0): 
\series default
plugin per Eclipse, in grado di individuare ed evidenziare staticamente,
 nel codice sorgente, alcuni tra i più comuni errori nella scrittura di
 codice 
\bar under
Java
\bar default
 (come l’uso di 
\bar under
worst practice
\bar default
).
 Ogni errore riscontrato verrà analizzato e discusso per valutarne l’eventuale
 modifica correttiva (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://findbugs.sourceforge.net/
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize

\series bold
EclEmma (≥ 2.2.0):
\series default
 plugin per Eclipse, in grado di verificare automaticamente la copertura
 del codice, sia durante la normale esecuzione, sia durante l’analisi dinamica
 tramite test.
 I test devono coprire il codice sorgente per intero (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.eclemma.org/
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize

\series bold
Metrics Plugin for Eclipse (≥1.3.6):
\series default
 plugin per Eclipse che permette di effettuare analisi metrica del codice
 prodotto.
 Fornisce informazioni relative a misure statiche del codice (vedi sezione
 4.3 per chiarimenti) come:
\end_layout

\begin_deeper
\begin_layout Itemize
Complessità ciclomatica
\end_layout

\begin_layout Itemize
Peso delle classi 
\end_layout

\begin_layout Itemize
Numero di parametri 
\end_layout

\begin_layout Itemize
Numero di campi dati per classe
\end_layout

\begin_layout Itemize
Numero livelli di annidamento
\end_layout

\begin_layout Itemize
Indice di utilità
\end_layout

\begin_layout Itemize
Indice di dipendenza
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
(
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://metrics.sourceforge.net/
\end_layout

\end_inset

)
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Google Plugin for Eclipse:
\series default
 plugin per Eclipse che permette di creare, testare e caricare applicazioni
 
\bar under
GAE
\bar default
 dall’interno di Eclipse stesso (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http: //code.google.com/eclipse
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
Strumenti di validazione W3C:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Markup Validation Service:
\series default
 per effettuare test su tutte le pagine navigabili del sistema e verificare
 l’aderenza allo standard 
\bar under
HTML5
\bar default
 (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://validator.w3.org/
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize

\series bold
\bar under
CSS
\bar default
 Validation Service:
\series default
 per effettuare test sui fogli di stile di tutte le pagine del sistema e
 verificare l’aderenza allo standard CSS 2.1 (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://jigsaw.w3.org/css-validator/
\end_layout

\end_inset

)
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Speed Tracer (≥ 2.4):
\series default
 plugin per Google Chrome che permette di verificare l’efficienza di un’applicaz
ione web durante la sua esecuzione (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http: //code.google.com/intl/it-IT/webtoolkit/speedtracer/
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize

\series bold
JUnit (≥ 4.11):
\series default
 framework per effettuare test di unità per il linguaggio di programmazione
 Java (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.junit.org/
\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
Per tutti gli altri strumenti utilizzati, non strettamente legati alla verifica,
 vedere le Norme di Progetto.
\end_layout

\begin_layout Subsection
Tecniche
\end_layout

\begin_layout Subsubsection
Analisi statica
\end_layout

\begin_layout Standard
Verrà applicata durante l’intero ciclo di vita del software, in due tipologie
 diverse:
\end_layout

\begin_layout Itemize

\series bold
Walkthrough:
\series default
 lettura critica del codice e/o dei documenti senza l’assunzione di presupposti
 e a largo spettro.
 Ogni difetto riscontrato viene discusso tra i verificatori e gli sviluppatori
\begin_inset Foot
status open

\begin_layout Plain Layout
Identificati in tutti coloro che hanno realizzato il determinato prodotto
 sottoposto a verifica.
\end_layout

\end_inset

 affinché siano evitate incomprensioni, per poi procedere alla modifica
 concordata.
 Ogni attività svolta deve essere registrata.
 Sebbene richieda risorse considerevoli, il walkthrough sarà indispensabile
 per individuare tutti gli errori e le anomalie, ed ogni problematica individuat
a verrà aggiunta alla lista di controllo, al fine di ridurre ulteriormente
 l’utilizzo di walkthrough nelle fasi successive, affinando la fase di inspectio
n.
 Per la fase di redazione dei documenti si procederà iniziando con il walkthroug
h, per poi passare successivamente all’inspection, grazie all’aggiunta di
 nuovi punti alla lista di controllo, come quelli presentati poco sotto.
 Per la fase di codifica si inizierà con il walkthrough per poi passare,
 in una fase intermedia, all’inspection, grazie all’arricchimento della
 lista di controllo
\end_layout

\begin_layout Itemize

\series bold
Inspection:
\series default
 lettura mirata del codice e/o dei documenti, guidata da una lista di controllo
 definita gradualmente, sia grazie all’esperienza personale, sia attraverso
 l’arricchimento derivante dall’attività di walkthrough, tale da raccogliere
 le tipologie di errori più frequenti che possono essere commessi durante
 un determinato processo e sono stati quindi individuati come critici.
 Per quanto riguarda l’inspection dei documenti, la lista di controllo conterrà
 i seguenti punti:
\end_layout

\begin_deeper
\begin_layout Itemize
LaTeX:
\end_layout

\begin_deeper
\begin_layout Itemize
Impostazione generale del documento affinché aderisca alle Norme di Progetto
\end_layout

\begin_layout Itemize
Controllo della sillabazione automatica
\end_layout

\begin_layout Itemize
Controllo punteggiatura e leggibilità del testo
\end_layout

\begin_layout Itemize
Presenza di una e una sola spaziatura dopo la punteggiatura
\end_layout

\begin_layout Itemize
Posizionamento corretto delle immagini all’interno della pagina
\end_layout

\begin_layout Itemize
Accentazioni corrette (scelta corretta tra acuti e gravi)
\end_layout

\begin_layout Itemize
Lettere maiuscole accentate
\end_layout

\begin_layout Itemize
Termini definiti nel glossario ma non sottolineati nel documento
\end_layout

\begin_layout Itemize
Termini sottolineati nel documento ma non presenti nel glossario
\end_layout

\end_deeper
\begin_layout Itemize

\bar under
UML
\bar default
:
\end_layout

\begin_deeper
\begin_layout Itemize
Mantenimento della consistenza tra la nomenclatura dei grafici UML e la
 nomenclatura adottata nelle sezioni in cui i grafici saranno inseriti
\end_layout

\begin_layout Itemize
Controllo ortografico dettagliato, data l’impossibilità di automatizzare
 tali controlli sui grafici
\end_layout

\begin_layout Itemize
Attenzione alla direzione delle frecce nei diagrammi
\end_layout

\begin_layout Itemize
Attenzione alla perfetta orizzontalità o verticalità di frecce orizzontali
 o verticali
\end_layout

\begin_layout Itemize
Controllo del nome del sistema
\end_layout

\begin_layout Itemize
Posizione degli include e degli extend
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Per quanto riguarda invece l’inspection del codice, seguiremo alcuni punti
 guida:
\end_layout

\begin_layout Itemize
Le variabili di programma devono essere inizializzate prima che il loro
 valore sia utilizzato
\end_layout

\begin_layout Itemize
Tutte le costanti devono avere un nome
\end_layout

\begin_layout Itemize
Il limite superiore degli array deve essere uguale alla loro dimensione
 o alla dimensione -1
\end_layout

\begin_layout Itemize
Controllare la presenza di eventuali buffer overflow
\end_layout

\begin_layout Itemize
Verificare che la condizione delle istruzioni condizionali sia corretta
\end_layout

\begin_layout Itemize
Ogni ciclo deve essere ultimato
\end_layout

\begin_layout Itemize
Le istruzioni composte devono essere correttamente messe fra parentesi
\end_layout

\begin_layout Itemize
Le variabili di input devono essere tutte utilizzate
\end_layout

\begin_layout Itemize
I break devono essere correttamente utilizzati se richiesti
\end_layout

\begin_layout Itemize
Le variabili di input devono essere tutte utilizzate
\end_layout

\begin_layout Itemize
Le variabili di output devono possedere un valore prima che vengano restituite
\end_layout

\begin_layout Itemize
Verificare gli effetti degli input imprevisti
\end_layout

\begin_layout Itemize
Le chiamate a funzione e a metodo devono possedere il corretto numero di
 parametri
\end_layout

\begin_layout Itemize
Il tipo dei parametri formali e reali deve corrispondere
\end_layout

\begin_layout Itemize
Corretta disposizione dei parametri
\end_layout

\begin_layout Itemize
Verificare che siano state prese in considerazione tutte le possibili condizioni
 di errore
\end_layout

\begin_layout Standard
Ogni difetto riscontrato viene corretto e ogni fase dell’inspection viene
 documentata con dei rapporti sulle attività svolte.
\end_layout

\begin_layout Standard
\noindent
L’inspection verrà preferita al walkthrough in quanto richiede meno attenzione
 ed è meno collaborativa (permettendo di essere effettuata in meno tempo
 e con meno risorse).
 All’inizio della codificazione non potremo affidarci ad una lista di controllo
 completa e dettagliata, e quindi si rimanderà l’inspection ad una fase
 intermedia nella quale la lista di controllo sarà sufficientemente ricca
 da poter essere affidabile e in grado di fornire vantaggi superiori al
 semplice walkthrough.
\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
\align left

\series bold
Metodi di Analisi Statica:
\end_layout

\begin_layout Standard
\noindent
Per quanto riguarda questa fase, le metodologie di analisi statica messe
 a disposizione sono svariate, sarà opportuno attuare l’analisi più adatta
 in base ad ogni situazione che si deve affrontare.
\end_layout

\begin_layout Itemize

\series bold
Analisi del flusso di controllo:
\series default
 verificherà, analizzando i vari flussi possibili, che il codice proceda
 correttamente e quindi rispetti la sequenza specificata.
 Accerteremo che il codice sia ben strutturato, che non esistano parti di
 codice che non vengono mai raggiunte o che non terminano.
 Il tutto tramite la tecnica di call-tree analysis (albero delle chiamate),
 sfruttando la capacità dei compilatori di calcolarlo, e verificando che
 le variabili di controllo delle iterazioni non vengano modificate.
 Il flusso di controllo sarà opportunamente analizzato in quelle parti di
 codice in cui, per esempio, vengono effettuate diverse chiamate di metodi
 a catena o vi siano variabili di controllo delle iterazioni
\end_layout

\begin_layout Itemize

\series bold
Analisi di flusso dei dati:
\series default
 assicura che il flusso di dati non faccia uso di variabili non ancora inizializ
zate o prive di valore in modo da evitare possibili errori al momento del
 loro utilizzo.
 Tali errori verranno facilmente evitati con una buona costruzione del codice
 da parte del programmatore, prestando particolare attenzione ad inizializzare
 quelle variabili alle quali non viene assegnato un valore in automatico
 dal compilatore.
 I verificatori avranno comunque il compito di effettuare tale analisi
\end_layout

\begin_layout Itemize

\series bold
Flusso d’informazione:
\series default
 individuazione delle relazioni tra ingressi ed uscite tra i vari moduli,
 accertando che le uniche dipendenze consentite siano quelle previste dalla
 specifica dei moduli.
 Questo tipo di analisi può essere effettuata a tre livelli: singolo modulo,
 più moduli tra loro correlati, intero sistema.
 In base ai moduli che otterremo si deciderà quali livelli di analisi utilizzare
\end_layout

\begin_layout Itemize

\series bold
Verifica formale del codice:
\series default
 tramite l’esplorazione di tutte le esecuzioni possibili si verifica la
 correttezza del codice rispetto alla specifica dei requisiti
\end_layout

\begin_layout Subsubsection
Analisi dinamica
\end_layout

\begin_layout Standard
Verrà effettuata verifica e validazione di ogni prodotto dell’attività di
 Realizzazione attraverso l’esecuzione di test.
 Ogni singolo test deve essere ripetibile, cioè deve essere effettuato dato
 lo stesso input, lo stesso ambiente di esecuzione e deve fornire gli stessi
 risultati, permettendo in tal modo il più facile riconoscimento dell’origine
 di eventuali difetti riscontrati.
 
\end_layout

\begin_layout Standard
\paragraph_spacing single
\noindent
\align left

\series bold
Metodi di Analisi Dinamica:
\end_layout

\begin_layout Itemize

\series bold
Test di unità:
\series default
 test che vengono applicati alle singole unità di sistema al fine di verificarne
 la presenza di malfunzionamenti
\end_layout

\begin_layout Itemize

\series bold
Test di integrazione:
\series default
 rappresenta il test effettuato su più unità software messe in comunicazione
 tra di loro per verificare che le loro interazioni siano quelle previste.
\end_layout

\begin_layout Itemize

\series bold
Test di sistema:
\series default
 rappresenta il test effettuato su tutte le unità software messe in comunicazion
e tra di loro per verificare che il prodotto nel suo insieme abbia le funzionali
tà e le caratteristiche previste
\end_layout

\begin_layout Itemize

\series bold
Test di regressione:
\series default
 tutte le volte che si applica una modifica ad una parte del codice precedenteme
nte testato e dimostrato funzionante, devono essere svolti tutti i test
 di unità e integrazione ad essa relativa, eventualmente aggiungendo nuovi
 test se necessario, al fine di non pregiudicare le funzionalità già verificate.
 Se due test risulteranno simili, il meno efficace tra i due dovrà essere
 eliminato
\end_layout

\begin_layout Itemize

\series bold
Test di accettazione:
\series default
 collaudo controllato dal committente.
 Se il collaudo viene superato in modo positivo, il sistema viene rilasciato
 e la commessa si conclude
\end_layout

\begin_layout Subsection
Misure e metriche
\end_layout

\begin_layout Standard
Le misure rilevate dal processo di verifica, che permettono di ottenere
 informazioni quantitative relative ai prodotti di ogni processo produttivo
 (sia esso progettuale o di codifica), devono essere basate su metriche
 stabilite a priori quando è possibile ritenere di avere sufficienti conoscenze
 dell’argomento trattato.
 Qualora ci fossero metriche, riguardanti determinate misure, ancora incerte
 e approssimative, si cercherà di provvedere a stabilirle precisamente durante
 il corso della progettazione e realizzazione del prodotto, attraverso l’analisi
 di ciò che sarà stato realizzato fino a quel momento e grazie anche all’apprend
imento graduale del gruppo.
 
\end_layout

\begin_layout Standard
\noindent
\align left
Le misure e le metriche suddette sono le seguenti:
\end_layout

\begin_layout Itemize

\series bold
Complessità ciclomatica:
\series default
 rappresenta la complessità di un metodo, basata sulla misurazione del numero
 di cammini linearmente indipendenti che attraversano il grafo di flusso
 di controllo, nel quale i nodi rappresentano gruppi indivisibili di istruzioni
 e gli archi connettono due nodi se le istruzioni di un nodo possono essere
 eseguite immediatamente dopo le istruzioni dell’altro nodo.
 Un valore elevato di complessità riduce la manutenibilità e le possibilità
 di riuso del metodo: se dovesse risultare tale, parte delle sue funzionalità
 deve essere demandando ad altri metodi da richiamare.
 Particolare attenzione va posta sulla stima di questo valore: il costrutto
 switch, ad esempio, moltiplica i cammini linearmente indipendenti e quindi
 può, molto facilmente, comportare una misurazione di complessità ciclomatica
 molto elevata (e comunque oltre i limiti imposti).
 Tuttavia potrebbe verificarsi l’eventualità che, al fine di garantire una
 velocità di esecuzione maggiore per un certo metodo, si decida di assumere
 limiti di complessità ciclomatica più laschi.
 I valori di complessità ciclomatica misurati verranno trattati, dunque,
 con le dovute considerazioni.
 Il valore ideale di complessità ciclomatica massima posto come obiettivo
 è dieci
\end_layout

\begin_layout Itemize

\series bold
Peso delle classi:
\series default
 è la somma totale della complessità ciclomatica di tutti i metodi appartenenti
 ad una determinata classe.
 Il valore deve essere ragionevole, e dove venisse ritenuto troppo alto,
 si procederà ad aumentare il numero di metodi della classe in considerazione,
 oppure verrà affidata parte dei compiti ad una o più nuove classi coese
\end_layout

\begin_layout Itemize

\series bold
Numero di parametri:
\series default
 indica il numero di parametri formali per metodo.
 Un numero molto elevato può essere ridotto, e quindi migliorato, grazie
 alla creazione di ulteriori classi che contengano più parametri tra loro
 correlati, aumentando la manutenibilità e l’astrazione del codice.
 La finalità è quella di mantenere un numero massimo di parametri pari a
 dieci
\end_layout

\begin_layout Itemize

\series bold
Numero di campi dati per classe:
\series default
 un numero elevato di attributi interni ad una classe potrebbe palesare
 la necessità di incapsulamento di parte di essi in nuove classi coese,
 che forniscano inoltre metodi utili al loro utilizzo
\end_layout

\begin_layout Itemize

\series bold
Numero di variabili locali: 
\series default
denota il numero di variabili locali interne a ciascun metodo.
 Come per il numero di campi dati per classe, potrebbe essere necessario
 incapsulare alcune di queste variabili in nuove classi coese qualora il
 numero sia troppo elevato
\end_layout

\begin_layout Itemize

\series bold
Numero di livelli di annidamento:
\series default
 rappresenta il numero di livelli di annidamento dei metodi.
 Un valore elevato determina alta complessità e riduce il livello di astrazione
 del codice: per questo deve mantenersi a livelli bassi
\end_layout

\begin_layout Itemize

\series bold
Grado di accoppiamento:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Indice di utilità:
\series default
 numero di classi esterne al package che dipendono da classi interne ad
 esso.
 Deve avere un valore ragionevole: se troppo basso indicherà che il package
 non fornisce molte funzionalità al suo esterno e quindi potrebbe essere
 scarsamente utile; se troppo alto indicherà che altre classi sono strettamente
 dipendenti dal package in questione, e quindi potrebbe accadere che eventuali
 modifiche ad esso comportino costi elevati di adattamento delle classi
 che vi dipendono, qualora non fosse stato progettato adeguatamente il sistema
 di interfacce
\end_layout

\begin_layout Itemize

\series bold
Indice di dipendenza:
\series default
 numero di classi interne al package che dipendono da classi esterne ad
 esso.
 In generale va sempre minimizzato, aumentando quindi le funzionalità proprie
 di un package, senza la necessità di affidarsi al servizio offerto da altre
 classi esterne
\end_layout

\end_deeper
\end_body
\end_document
